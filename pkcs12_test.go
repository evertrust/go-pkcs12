// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package pkcs12

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/tls"
	"crypto/x509"
	"encoding/base64"
	"encoding/pem"
	"github.com/EverTrust/go-pkcs12/pkg/x509_evt"
	"reflect"
	"testing"
)

func TestPfx(t *testing.T) {
	for commonName, base64P12 := range testdata {
		p12, _ := base64.StdEncoding.DecodeString(base64P12)

		priv, _, cert, err := Decode(p12, "")
		if err != nil {
			t.Fatal(err)
		}

		if err := priv.(*rsa.PrivateKey).Validate(); err != nil {
			t.Errorf("error while validating private key: %v", err)
		}

		if cert.Subject.CommonName != commonName {
			t.Errorf("expected common name to be %q, but found %q", commonName, cert.Subject.CommonName)
		}
	}
}

func TestPEM(t *testing.T) {
	for commonName, base64P12 := range testdata {
		p12, _ := base64.StdEncoding.DecodeString(base64P12)

		blocks, err := ToPEM(p12, "")
		if err != nil {
			t.Fatalf("error while converting to PEM: %s", err)
		}

		var pemData []byte
		for _, b := range blocks {
			pemData = append(pemData, pem.EncodeToMemory(b)...)
		}

		cert, err := tls.X509KeyPair(pemData, pemData)
		if err != nil {
			t.Errorf("err while converting to key pair: %v", err)
		}
		config := tls.Config{
			Certificates: []tls.Certificate{cert},
		}
		config.BuildNameToCertificate()

		if _, exists := config.NameToCertificate[commonName]; !exists {
			t.Errorf("did not find our cert in PEM?: %v", config.NameToCertificate)
		}
	}
}

func TestTrustStore(t *testing.T) {
	for commonName, base64P12 := range testdata {
		p12, _ := base64.StdEncoding.DecodeString(base64P12)

		_, _, cert, err := Decode(p12, "")
		if err != nil {
			t.Fatal(err)
		}

		pfxData, err := EncodeTrustStore(rand.Reader, []*x509.Certificate{cert}, "password")
		if err != nil {
			t.Fatal(err)
		}

		decodedCerts, err := DecodeTrustStore(pfxData, "password")
		if err != nil {
			t.Fatal(err)
		}

		if len(decodedCerts) != 1 {
			t.Fatal("Unexpected number of certs")
		}

		if decodedCerts[0].Subject.CommonName != commonName {
			t.Errorf("expected common name to be %q, but found %q", commonName, decodedCerts[0].Subject.CommonName)
		}
	}
}

func TestPBES2_AES256CBC(t *testing.T) {
	// This P12 PDU is a self-signed certificate exported via Windows certmgr.
	// It is encrypted with the following options (verified via openssl): PBES2, PBKDF2, AES-256-CBC, Iteration 2000, PRF hmacWithSHA256
	commonName := "*.ad.standalone.com"
	base64P12 := `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`
	p12, _ := base64.StdEncoding.DecodeString(base64P12)
	pk, _, cert, caCerts, err := DecodeChain(p12, "password")
	if err != nil {
		t.Fatal(err)
	}

	rsaPk, ok := pk.(*rsa.PrivateKey)
	if !ok {
		t.Error("could not cast to rsa private key")
	}
	if !rsaPk.PublicKey.Equal(cert.PublicKey) {
		t.Error("public key embedded in private key not equal to public key of certificate")
	}
	if cert.Subject.CommonName != commonName {
		t.Errorf("unexpected leaf cert common name, got %s, want %s", cert.Subject.CommonName, commonName)
	}
	if len(caCerts) != 0 {
		t.Errorf("unexpected # of caCerts: got %d, want 0", len(caCerts))
	}
}

func TestPBES2_AES128CBC(t *testing.T) {
	//PKCS7 Encrypted data: PBES2, PBKDF2, AES-128-CBC, Iteration 2048, PRF hmacWithSHA256
	commonName := "example-com"
	base64P12 := `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`

	p12, _ := base64.StdEncoding.DecodeString(base64P12)
	pk, _, cert, caCerts, err := DecodeChain(p12, "rHyQTJsubhfxcpH5JttyilHE6BBsNoZp")
	if err != nil {
		t.Fatal(err)
	}

	rsaPk, ok := pk.(*rsa.PrivateKey)
	if !ok {
		t.Error("could not cast to rsa private key")
	}
	if !rsaPk.PublicKey.Equal(cert.PublicKey) {
		t.Error("public key embedded in private key not equal to public key of certificate")
	}
	if cert.Subject.CommonName != commonName {
		t.Errorf("unexpected leaf cert common name, got %s, want %s", cert.Subject.CommonName, commonName)
	}
	if len(caCerts) != 0 {
		t.Errorf("unexpected # of caCerts: got %d, want 0", len(caCerts))
	}
}

func TestPBES2_AES192CBC(t *testing.T) {
	//PKCS7 Encrypted data: PBES2, PBKDF2, AES-192-CBC, Iteration 2048, PRF hmacWithSHA256
	commonName := "example-com"
	base64P12 := `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`

	p12, _ := base64.StdEncoding.DecodeString(base64P12)
	pk, _, cert, caCerts, err := DecodeChain(p12, "password")
	if err != nil {
		t.Fatal(err)
	}

	rsaPk, ok := pk.(*rsa.PrivateKey)
	if !ok {
		t.Error("could not cast to rsa private key")
	}
	if !rsaPk.PublicKey.Equal(cert.PublicKey) {
		t.Error("public key embedded in private key not equal to public key of certificate")
	}
	if cert.Subject.CommonName != commonName {
		t.Errorf("unexpected leaf cert common name, got %s, want %s", cert.Subject.CommonName, commonName)
	}
	if len(caCerts) != 0 {
		t.Errorf("unexpected # of caCerts: got %d, want 0", len(caCerts))
	}
}

// FIXME: add PQC and hybrid tests

func TestEncode(t *testing.T) {
	base64P12 := `MIIK1wIBAzCCCoMGCSqGSIb3DQEHAaCCCnQEggpwMIIKbDCCBkIGCSqGSIb3DQEHAaCCBjMEggYvMIIGKzCCBicGCyqGSIb3DQEMCgECoIIFMTCCBS0wVwYJKoZIhvcNAQUNMEowKQYJKoZIhvcNAQUMMBwECKESv9Fb9n1qAgIH0DAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQVfcQGG6G712YmXBYug/7aASCBNARs5FW8sl11oZG+ynkQCQKByX0ykA8sPGqz4QJ9zZVda570ZbTP0hxvWbh7eXErZ4eT0Pg68Lcp2gKMQqGLhasCTEFBk41lpAO/Xpy1ODQ/4C6PrQIF5nPBcqz+fEJ0FxxZYpvR5biy7h8CGt6QRc44i2Iu4il2YotRcX5r4tkKSyzcTCHaMq9QjpR9NmpXtTfaz+quB0EqlTfEe9cmMU1JRUX2S5orVyDE6Y+HGfg/PuRapEk45diwhTpfh+xzL3FDFCOzu17eluVaWNE2Jxrg3QvnoOQT5vRHopzOWDacHlqE2nUXGdUmuzzx2KLtjyJ/g8ofHCzzfLd32DmfRUQAhsPLVMCygv/lQukVRRnL2WJuwpP/58I1XLcsb6J48ZNCVsx/BMLNQ8GBHOuhPmmZ/ca4qNWcKALmUhh1BOE451n5eORTbJC5PwNl0r9xBa0f26ikDtWsGKNXSSntVGMgxAeNjEP2cfGNzcB23NwXvxGONL8BSHf8wShGJ09t7A3rXhr2k313KedQsKvDowj13LSYlUGogoF+5RGPdLtpLxk6GntlucvhO+OPd+Ccyvzd/ESaVQeqep2tr9kET80jOtxjdr7Gbz4Hn2bDDM+l+qpswVKw6NgTWFJrLt1CH2VHqoaTsQoQjMuoqH6ZRb3TsrzXwJXNxWE9Nov8jf0qUFXRqXaghqhYBHFNaHrwMwOneQ+h+via8cVcDsmmrdHEsZijWmp9cfb+lcDIl5ZEg05EGGULnyHxeB8dp3LBYAVCLj6KthYGh4n8dHwd6HvfCDYYJQbwvV+I79TDUNc6PP32sbfLomLahCJbtRV+L+VKjp9wNbupF2rYVpijiz1cyATn43DPDkDnTS2eQbA+u0hUC32YqK3OmPiJk7pWp8uqGt15P0Rfyyb4ZJO7YhA+oghyRXB0IlQZ9DMlqbDF3g2mgghvSGw0HXoVcGElGLtaXIHh4Bbch3NxD/euc41YA4CwvpeTkoUg37dFI3Msl+4smeKiVIVtnL7ptOxmiJYhrZZSEDbjVLqvbuUaqn+sHMnn2TksNs6mbwgTTEpEBtf4FJ4kij1cg/UkPPLmyM9O5iDrCdNxYmhUM47wC1trFGeG4eKhYFKpIclBfZA+w2PEw7kZS8rr8jbBgzLiqVhRvUa0dHq4zgmnjR7baa0ED69kXXwx3O8I9JMECECjma7o75987fJFvhRaRhJpBl9Qlrb/8HRK97vwuMZEDU+uT5Rg7rfG1qiyUxxcMplvaAs5NxZy14BpD6oCeE912Iw+kflckGHRKvHpKJij9eRdhfesXSA3fwCILVqQAi0H0xclLdA2ieH2NyrYXsJPJvrh2NYSv+wzRSnFVjGGqhePwSniSUVoJRrkb9YVAKGmA7/2Vs4H8HGTgw3tM5RM50L0ObRYmH6epPFNfr9qipjxet11mn25Sa3dIbVkaF6Tl5bU6C0Ys3WXYIzVOa7PQAyLhjU7M7OeLY5kZK1DVLjApvUtb1PuQ83AcxhRctVCM1S6EwH6DWMC8hh5m2ysiqiBpmLUaPxUcMPPlK8/DP4X+ElaALnjUHXYx8l/LYvo8nbiwXB26Pt+h21CmSMpjeC2Dxk67HkCnLwm3WGztcnTyWjkz6zkf9YrxSG7Ql/wzGB4jANBgkrBgEEAYI3EQIxADATBgkqhkiG9w0BCRUxBgQEAQAAADBdBgkqhkiG9w0BCRQxUB5OAHQAZQAtAGMANgBiAGQAYQA2ADIAMgAtADMAMABhADQALQA0AGUAYwBiAC0AYQA4ADQANAAtADEAOQBjAGMAYgBmADEAMgBhADUAMQAxMF0GCSsGAQQBgjcRATFQHk4ATQBpAGMAcgBvAHMAbwBmAHQAIABTAG8AZgB0AHcAYQByAGUAIABLAGUAeQAgAFMAdABvAHIAYQBnAGUAIABQAHIAbwB2AGkAZABlAHIwggQiBgkqhkiG9w0BBwagggQTMIIEDwIBADCCBAgGCSqGSIb3DQEHATBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQINoqHIcmRiwUCAgfQMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBBswaO5+BydNdATUst6dpBMgIIDoDTTSNRlGrm+8N5VeKuaySe7dWmjL3W9baJNErXB7audUdapdWXsBYVgrHNMfYCOArbDesWQLE3JQILaQ7iQYYWqFk4qApKCjHyISJ6Ks9t46EcRRBx2RhE0eAVyoEBdsncYSSUeBmC6qvJfyXk6zL8F6XQ9Q6Gq/P9o9L+Bb2Z6IZurIFPolntimemAdD2XhPAYtk6MP2CeOTsBJHNAJ5Z2Je2F4nEknE+i48mmr/PPCA6k24vXNwXSyF7CKyQCa9dBnNjEo6M8p39UIlBvBWmleKq+GmkaZpEtG16aMFDaWSNgcifHk0xaT8aV4VToGl4fvXn1ZEPeGerN+4SbdDipMXZCmw5YpCBZYWi9qXuof8Ue6hnH48fQKHAVslNtSbS3FcnQavv7YTeR2Npf9lBZHhhnvoAVFCYOQH5CMBqqKiBVWJzBxF2evB1gKvzJnqqb6gJp62eH4NisThu06Gxd9LssVbri1z1600XequI2gcYpPPDY3IuUY8xGjfHvhFCcIegkp3oQfUg+G7GHjQgiwZqnV1tmk76wamreYh/3zX4lZlpQbpFpUz+MB4WPFoTeHm2/IRhs2Dur6nMQEidd/UstLH83pJNcQO0e/DHUGt8FIyeMcfox6V/ml3mqx50StY9b68+TIFk6htZkHXAzer8c0HF00R6L/XdUfd9BkffngNX4Ca+cmrAQN44j7/lGJSrEbTYbxxLTiwOTm7fMddBdI9Y49O3wy5lvrH+TMdMIJCRG2oOCILGQZkRzzgznixo12tjgjW5CSmjRKdnLlZl47cGEJDmB7gFS7WB7i/qot23sFSvunnivvx7mVYrsItAIdPFXzzV/WS2Go+1eJMW0GOhA7EN4R0TnFp0WjPZjR4QNU0q034C2v9wldGlK+EVJaRnAZqlpJ0khfOz12LSDm90JgHIUi3eQxL6dOuwLwbiz5/aBhCGitZVGq4gRcaIPTfWniqv3QoyA+i3k/Nn2IEAi8a7R9DPlmkvQaAvKAkaO53c7XzOj0hTnkjO7PfhiwGgpCFdHlKg5jk/SB6qxkSwtXZwKaUIynnlu52PykemOh/+OZ+e6p8CiBv9my650avE0teCE9csOjOAQL7BCKHIC6XpsSLUuHhz7cTf8MehzJRSgkl5lmdW8+wJmOPmoRznUe5lvKT6x7op6OqiBjVKcl0QLMhvkJBY4TczbrRRA97G96BHN4DBJpg4kCM/votw4eHQPrhPVce0wSzAvMAsGCWCGSAFlAwQCAQQgj1Iu53yHiWVEMsvWiRSzVpPEeNzjeXXdrfuUMhBDWAQEFLYa3qh/1OH1CugDTUZD8yt4lOIFAgIH0A==`
	p12, _ := base64.StdEncoding.DecodeString(base64P12)
	pk, _, cert, _, err := DecodeChain(p12, "password")
	if err != nil {
		t.Fatal(err)
	}

	rsaPk, ok := pk.(*rsa.PrivateKey)
	if !ok {
		t.Error("could not cast to rsa private key")
	}

	_, err = Encode(rand.Reader, rsaPk, cert, nil, "test")
	if err != nil {
		t.Fatal(err)
	}

	legacy, err := LegacyDES.WithRand(rand.Reader).EncodeWithAttributes(rsaPk, cert, nil, "test", "myName", "Microsoft Software Key Storage Provider")
	if err != nil {
		t.Fatal(err)
	}
	// Try decoding
	_, _, pkcs, err := Decode(legacy, "test")
	if pkcs.Subject.CommonName != "*.ad.standalone.com" {
		t.Fatal("wrong legacy p12 decoded")
	}

	legacy, err = LegacyRC2.WithRand(rand.Reader).EncodeWithAttributes(rsaPk, cert, nil, "test", "myName", "Microsoft Software Key Storage Provider")
	if err != nil {
		t.Fatal(err)
	}
	// Try decoding
	_, _, pkcs, err = Decode(legacy, "test")
	if pkcs.Subject.CommonName != "*.ad.standalone.com" {
		t.Fatal("wrong legacy p12 decoded")
	}

	modern, err := Modern2023.WithRand(rand.Reader).EncodeWithAttributes(rsaPk, cert, nil, "test", "myName", "Microsoft Software Key Storage Provider")
	if err != nil {
		t.Fatal(err)
	}
	// Try decoding
	_, _, pkcs, err = Decode(modern, "test")
	if pkcs.Subject.CommonName != "*.ad.standalone.com" {
		t.Fatal("wrong legacy p12 decoded")
	}
}

var testdata = map[string]string{
	// 'null' password test case
	"Windows Azure Tools": `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`,
	// empty string password test case
	"testing@example.com": `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
HQ8CAggA`,
}

func TestThatPrivateKeyEncodingAddsAttributeForDigitalSignatureCert(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIDFTCCAf2gAwIBAgIQEBA8PccE/bx1uR/v13CfXDANBgkqhkiG9w0BAQsFADAO
MQwwCgYDVQQDDANBQzIwHhcNMjQwMjEzMTQwMzQ1WhcNMjUwMjEyMTQwMzQ1WjAP
MQ0wCwYDVQQDDAR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
luvPARIaLq2J5FP7oXcQsNq2y6mZ9LMhPWtwz40L+tpO7Cgy+slTFV3tkB7ioMDw
3IY5B1HeWcvy8u3Ss5unywOHghsAqYnaGht85i2LeyjWQDUqN51tabqS27AsGjK6
A7GPk5oZdAWcKLWtyYBAi2XMn910FXIj3j5wx4rvdnsWrMKGk/JSkhaZXu9ZnrfC
yhHg89LdMqYkcAuP6dvB/jlM9FoNPxVaNgSSnGNFfI4RR09nkkhhgIQBYClWEJA2
RDXV5I208Nw+5b48CibgWmpyGi25JlsbAU2kIohE4ZCZT04UKA3ahjOWHEqdbsxS
bn+NqNlZNGuhImJnzLtkxQIDAQABo24wbDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQW
BBRO579pF0JvOC/mVIQCJWq548tqKzAfBgNVHSMEGDAWgBQmbdxzWH8HeoFiXE9o
hIBTrs/0MjALBgNVHQ8EBAMCB4AwDwYDVR0RBAgwBoIEdGVzdDANBgkqhkiG9w0B
AQsFAAOCAQEAGpb/+GpOfiLe3oGwAF9mIIpKNsUvKwwjyDsKB0jDZ/pDmU8LC/GT
iAjdLpPh53wRY9zzRNfgF0GO5gN3g3Eo2ULlLJxgtYlwqhrpbLjqbtFLTtuDyQ/V
waIQpBiZwI3GgzZ2+UZn3CNjgT5Ok7Qx0So4vtyp+JqUGphh7b+xsfWAhKr1vZHO
ZnYlJvPhNbi6sxrnkDT8ER00zhYYT88nl1rvXy5RvGvuLv7toohOp2z1rlRi9Gtt
SQBwvvB1HlA+U57VfqatoqP8zwuLEyiJgHjKzcUqYsS2g2Uid/EvjKnw9mgJ2Jnr
kRZdU0OmPc5ZQAWwKh41MLS8+gHYZOVidQ==
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCW688BEhourYnk
U/uhdxCw2rbLqZn0syE9a3DPjQv62k7sKDL6yVMVXe2QHuKgwPDchjkHUd5Zy/Ly
7dKzm6fLA4eCGwCpidoaG3zmLYt7KNZANSo3nW1pupLbsCwaMroDsY+Tmhl0BZwo
ta3JgECLZcyf3XQVciPePnDHiu92exaswoaT8lKSFple71met8LKEeDz0t0ypiRw
C4/p28H+OUz0Wg0/FVo2BJKcY0V8jhFHT2eSSGGAhAFgKVYQkDZENdXkjbTw3D7l
vjwKJuBaanIaLbkmWxsBTaQiiEThkJlPThQoDdqGM5YcSp1uzFJuf42o2Vk0a6Ei
YmfMu2TFAgMBAAECggEAHAxvSG+o1gwCmKDTH0sVmwjK+EbpCgVQpC2Xpbs9Ar4X
9OPztZA9FLeEM0jKLb4uBY4cgzO/80hoOqXghuji4mQhhxilotyv4DJDoDPOvHD2
gLBgzD1B3GiEarfvOl87GvyhBnmZSWrRfu9lARII7N9ajEuIC4RPDjrkkvFLV+V3
XLYN4/QiilcveHqgkWZkT6mqUnTeCCntw3gAuGNyUKZzF6SpoLeBX8E14boNOa5n
0kNwLb7tf8F6OM3Y4R2wWB1OXYIKwFiTswIYVDYuP6phIlJuqTw5JnRrkgSY3Auf
Yy3DrldQ9u8Ry7J/8LweshiL3sAYfSNuTtJOIodqgQKBgQDGUcMDhBSs6gs/zSxY
W4xNtSYfefIgMr+cjUvbhcToX3tVNTOEhFUUlPAsN+NBM2qmKK/8R79hYSQeg8Ny
KR8H1l0sJroZk5kKModpVfqf61TSipsdoGHyknKxynvX4FNHS9umzJ3kwgLlEb9F
WgwdcLHi4YMkSYeddgVknsLbTQKBgQDC0Ovz2EBhK2m5lkHumQeFxNe0cTxIXqaY
ayk2GzHy1vhnRD32qsDmjx4zuCdCKyHfoTPW4PWNuldacqI3/4RRs5d0dvHzlwjG
UmjGogtpbCD0y5wAwNjoe1lZR/y6VnqJcTicA9rqHfqIoNv6Grf62dYd+PCp1gre
C7A5TfhDWQKBgCdnBUUEkAsO8S86942SmtyxmiJ02xt0mcdj92dlO4sjtWBnkpXI
qRLOyK0waXGB4rWirdyE8MxLPZ7mdQWQj/7Bo39rLlx4i9aP1YGjOIlfe1ndehY3
0F4epLUYUuTASCuJMdoBG3ng5ixXC1afHnsW8fDu91xVU6GAWm/0byidAoGAXGph
VAaE29ONTtWhpz7+2406SkXhM+96lhlXrmwOMMWbhtlPj6EG6xh/WkeEkBYH9p7x
CYEj2zzHTYfNvkS/D0bjlQML2eMO7Y2QWJHsWfFKXPXtpknVW8uP4hONJxP5AxQr
p48InUDlZUTxtV5RYnVN5l/+QoLgGt9ulHCRUdkCgYEAunNFGBfZXj74t2pDkZIL
L8BwL5x8DEENUajGNIW7rJkwH632rXFnDvTjcQ9VtvgVXWXak83874U3Y6rBIR7C
n2EPOuMaB6Y1ViTzUsW3Ql4FlE/5bF372zbZxwy0DGKGt+Wpqlh980itiSQ+tz6J
rOCwZ+pNzdfXa2rpLwN7uCk=
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := x509_evt.ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pfx, err := Modern2023.WithRand(rand.Reader).Encode(key, cert, nil, "test")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(pfx))
}

func TestThatPrivateKeyEncodingAddsAttributeForKeyEnciphermentCert(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIDFTCCAf2gAwIBAgIQLojxnS/xQX/jQfzXgdvlSjANBgkqhkiG9w0BAQsFADAO
MQwwCgYDVQQDDANBQzIwHhcNMjQwMjEzMTQyMjAxWhcNMjUwMjEyMTQyMjAxWjAP
MQ0wCwYDVQQDDAR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
luvPARIaLq2J5FP7oXcQsNq2y6mZ9LMhPWtwz40L+tpO7Cgy+slTFV3tkB7ioMDw
3IY5B1HeWcvy8u3Ss5unywOHghsAqYnaGht85i2LeyjWQDUqN51tabqS27AsGjK6
A7GPk5oZdAWcKLWtyYBAi2XMn910FXIj3j5wx4rvdnsWrMKGk/JSkhaZXu9ZnrfC
yhHg89LdMqYkcAuP6dvB/jlM9FoNPxVaNgSSnGNFfI4RR09nkkhhgIQBYClWEJA2
RDXV5I208Nw+5b48CibgWmpyGi25JlsbAU2kIohE4ZCZT04UKA3ahjOWHEqdbsxS
bn+NqNlZNGuhImJnzLtkxQIDAQABo24wbDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQW
BBRO579pF0JvOC/mVIQCJWq548tqKzAfBgNVHSMEGDAWgBQmbdxzWH8HeoFiXE9o
hIBTrs/0MjALBgNVHQ8EBAMCBSAwDwYDVR0RBAgwBoIEdGVzdDANBgkqhkiG9w0B
AQsFAAOCAQEAWmQ5U+BwvCyw7jvrkNsIbyG7tUsYdIzJ3TMzgD7Ts5LsPvQXDn9B
7rcp7O8h8obAW+ThtguzbDONdJrgipTkmLYxKEBDyQGi7PEmLzDGyduG+wS2ddhS
Mtl9Z1hS2MbGbwWwxkdWqj2UH9eop8MMWvcejaIV1ztLT6wVdHHRxzQshcd8nAjU
FVC81e0WPpAKWHfitM2zKy3tj7yQJmCk6/tZgQJC/hLPR/BR2euh1xlJUih2reNR
4LMAe6aCxSQ+3kDGg5Tht5/M4yfdn/JNCQGMQJY/yUuWyizuflInnWAMyjAoH64k
9lD9jGhvOqlvVXOx9mEZwXEZf53y18CSgA==
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCW688BEhourYnk
U/uhdxCw2rbLqZn0syE9a3DPjQv62k7sKDL6yVMVXe2QHuKgwPDchjkHUd5Zy/Ly
7dKzm6fLA4eCGwCpidoaG3zmLYt7KNZANSo3nW1pupLbsCwaMroDsY+Tmhl0BZwo
ta3JgECLZcyf3XQVciPePnDHiu92exaswoaT8lKSFple71met8LKEeDz0t0ypiRw
C4/p28H+OUz0Wg0/FVo2BJKcY0V8jhFHT2eSSGGAhAFgKVYQkDZENdXkjbTw3D7l
vjwKJuBaanIaLbkmWxsBTaQiiEThkJlPThQoDdqGM5YcSp1uzFJuf42o2Vk0a6Ei
YmfMu2TFAgMBAAECggEAHAxvSG+o1gwCmKDTH0sVmwjK+EbpCgVQpC2Xpbs9Ar4X
9OPztZA9FLeEM0jKLb4uBY4cgzO/80hoOqXghuji4mQhhxilotyv4DJDoDPOvHD2
gLBgzD1B3GiEarfvOl87GvyhBnmZSWrRfu9lARII7N9ajEuIC4RPDjrkkvFLV+V3
XLYN4/QiilcveHqgkWZkT6mqUnTeCCntw3gAuGNyUKZzF6SpoLeBX8E14boNOa5n
0kNwLb7tf8F6OM3Y4R2wWB1OXYIKwFiTswIYVDYuP6phIlJuqTw5JnRrkgSY3Auf
Yy3DrldQ9u8Ry7J/8LweshiL3sAYfSNuTtJOIodqgQKBgQDGUcMDhBSs6gs/zSxY
W4xNtSYfefIgMr+cjUvbhcToX3tVNTOEhFUUlPAsN+NBM2qmKK/8R79hYSQeg8Ny
KR8H1l0sJroZk5kKModpVfqf61TSipsdoGHyknKxynvX4FNHS9umzJ3kwgLlEb9F
WgwdcLHi4YMkSYeddgVknsLbTQKBgQDC0Ovz2EBhK2m5lkHumQeFxNe0cTxIXqaY
ayk2GzHy1vhnRD32qsDmjx4zuCdCKyHfoTPW4PWNuldacqI3/4RRs5d0dvHzlwjG
UmjGogtpbCD0y5wAwNjoe1lZR/y6VnqJcTicA9rqHfqIoNv6Grf62dYd+PCp1gre
C7A5TfhDWQKBgCdnBUUEkAsO8S86942SmtyxmiJ02xt0mcdj92dlO4sjtWBnkpXI
qRLOyK0waXGB4rWirdyE8MxLPZ7mdQWQj/7Bo39rLlx4i9aP1YGjOIlfe1ndehY3
0F4epLUYUuTASCuJMdoBG3ng5ixXC1afHnsW8fDu91xVU6GAWm/0byidAoGAXGph
VAaE29ONTtWhpz7+2406SkXhM+96lhlXrmwOMMWbhtlPj6EG6xh/WkeEkBYH9p7x
CYEj2zzHTYfNvkS/D0bjlQML2eMO7Y2QWJHsWfFKXPXtpknVW8uP4hONJxP5AxQr
p48InUDlZUTxtV5RYnVN5l/+QoLgGt9ulHCRUdkCgYEAunNFGBfZXj74t2pDkZIL
L8BwL5x8DEENUajGNIW7rJkwH632rXFnDvTjcQ9VtvgVXWXak83874U3Y6rBIR7C
n2EPOuMaB6Y1ViTzUsW3Ql4FlE/5bF372zbZxwy0DGKGt+Wpqlh980itiSQ+tz6J
rOCwZ+pNzdfXa2rpLwN7uCk=
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := x509_evt.ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pfx, err := Modern2023.WithRand(rand.Reader).Encode(key, cert, nil, "test")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(pfx))
}

func TestThatPrivateKeyEncodingAddsAttributesForCertHavingBoth(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIEdjCCAl6gAwIBAgIQfazpyXuiva0/DAJESzOgpzANBgkqhkiG9w0BAQsFADBD
MQswCQYDVQQGEwJGUjESMBAGA1UEChMJRXZlclRydXN0MSAwHgYDVQQDExdFdmVy
VHJ1c3QgUUEgSXNzdWluZyBDQTAeFw0yNDAyMDYwOTE1MDdaFw0yNTAyMDUwOTE1
MDdaMBMxETAPBgNVBAMMCHJhbmRvbWNuMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
MIIBCgKCAQEAi7rrjLWC6JJ5UvFYjpMZHy/v5yWVjNOi6KipTepJLSFM+qd+TWEI
W8culVqo0kwN00eEhDbqMPHWhQzn0y72MtjtLMZxGkfMiq1oSVhbjuKyjZoHhvi9
uAvG3RFxgSYlt/E72F5FBy+epl+cj8TWZwtfXZG0SQT7EbV4zKq2RmvvKuo5vjTX
yOUQnPTJRYbt+1bnLidiykflN/PQmTGPFLzml9fT86NUc3bHVvo3j+uqgoIa35yL
HIW+kKb83M3UveqJQ1nRY412dDypzuu2lxYPGq8tfW3lYhgUhUa55JNqBIWL9wc5
hWQ3rcuXs9R4po3ytOnaznjvRjaHGyW1OQIDAQABo4GVMIGSMAwGA1UdEwEB/wQC
MAAwHQYDVR0OBBYEFL+WkjeE64csX65rIklnsZmnKWodMB8GA1UdIwQYMBaAFBQQ
3LAzCfegGprKagjWFldyJcCpMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggr
BgEFBQcDAgYIKwYBBQUHAwEwEwYDVR0RBAwwCoIIa3RvLnRlc3QwDQYJKoZIhvcN
AQELBQADggIBAHLR5xnZUxNohETkK8GvOn+4OZ+4BUz6pdgGF/xj9talMQQiQoEO
4XVIjeaBk4N8caRG4G0hEicDuBup138BhMXyOzE1jjpQ+0QfeeXeFlJ9wCZ0C5Ot
jseQQhV48e8UGHLB8lJKXJnb7VidUY5kjzW3QCszf32Y7kSRCQvQ0sujz9qgi+2F
N0+owprng2T9bRsDGN5CBMvBEz0KAryTrDPy0+W0K5agl0W/NWZ3Wt38sX3tvZiG
tS2ogocl4Lfq3XTlfJ/Mw1B2a9ncIHHwPyY3Lpvqbc6fukZkGXMeoYceBRnvJy3A
qdd+2StUu4JWzUNDD80Dcb1JkZFM7GxeUqphGxdmqQEW39mVydzwK9DZQdKb5vxR
VWE9OlRRyz5prnCEKdwOQu4p27//DJnEVODDZWO4k8h858ejeuOJR9xkP8QKwr1B
hQldRL1RGAmtpXEC9Ysmz5GC7ho1frlArsA+GECTY2Pee00WY40AtU44qZwtRO/W
OwVlvGseGI+1EjFXvZRutx4Tbvi9TP/9hY3NYf5RpFzuXCPJe7HDVyRzNz9ePNB0
ImYunPr0MI5Aj35IwcjItD+K7Roamoek6AmwLE2y5JQxKcHdglmQWpgksftzgZCw
NaMYk5FEuLn9lcMcbjS79RKwPSsZ2HnrKY4CvNnuZMSbsboAubZV7rut
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCLuuuMtYLoknlS
8ViOkxkfL+/nJZWM06LoqKlN6kktIUz6p35NYQhbxy6VWqjSTA3TR4SENuow8daF
DOfTLvYy2O0sxnEaR8yKrWhJWFuO4rKNmgeG+L24C8bdEXGBJiW38TvYXkUHL56m
X5yPxNZnC19dkbRJBPsRtXjMqrZGa+8q6jm+NNfI5RCc9MlFhu37VucuJ2LKR+U3
89CZMY8UvOaX19Pzo1RzdsdW+jeP66qCghrfnIschb6QpvzczdS96olDWdFjjXZ0
PKnO67aXFg8ary19beViGBSFRrnkk2oEhYv3BzmFZDety5ez1HimjfK06drOeO9G
NocbJbU5AgMBAAECggEAC7qD3Qq7U0RANMsXUNheCnUeoPtRo0F8ciT+GREqVURv
TrbSbjJP3kxIx7aVZxmFK4/cOrDVVYhnJkHgD6Toe3oj5lc91SPjslw93bIx9Tto
G2SrbxPf8NvkNFgre9i038y65j17c8/2dCagYJz4FiwpNBRv2pU1cdYWrq9Bn4V+
CDIAOZvj/Wud1Z8z7p/kzvu0xPvQb3+RFwVeS4mR4fA8EzXuEu2NY1PRXqdDTXO0
uA93JxrVSXoMhiFlWinZGwypZtMKqR4Esyb0smH6QL7u/HjDDWiDw4UCQd8lfOlc
BgaNIjraXl1hbjkh1znSJ7PbeuXbteg7FOi/mdv+gQKBgQDDb6/ftQ7fWN7KiOFW
3kDR82sa55gGtzBts4F20uv1IZSMGnJEbAMKTYH2UkCgZiulAxq8IWzCcGyylgmZ
grxw0zdpiDkEbcNtz0qL9l8gUMfDRdTapN4FATy4oeUQ3FJd/G2f1SRCaThn0/Zf
sB86nCqMMs7zm9l1UfuotUoAaQKBgQC3B/dFt5wxblIp6ZYBADPYymv460YXR0Jw
jlZ11ze2u4pcGRAPGCQRVQrLyM1q05wWQwlm6Cnm6ClVr2osyNEQS2oWHyl7AEZj
nb+hh6LxFMgkfSRuwp3gSJ8mhA4QJ9Ayo6+3+X47OuWwsIdEMMWDN3tnrtuhivPx
CSIKcKx0UQKBgH7G567Vk9U8oCGAE7U3LZNENVlZnJvWn7q59CSxhFEavHL6AN/z
tTEswD6acsPaIzvCvMgHYrbrGQfsHkQPs8/4o/x4WoxN67VC/9e1NVYQMNWyafZ/
dmqGt+4JTz/VvDStuCszp3bRLL7ll+/QnyF1BoC1wNv0YGcjjH2PRHbpAoGAMP5x
43il19mHJu7/F199gW+V/XjFN1/82fJQFJU6tbB39fVDhjbZGMah8DDdQ9ZHNvJU
5vYImWXWArjE/B35UJpPWIKY8PL+5JWKgWu0Y0JD3PieswNnjW0DJSU+Onbd1WBZ
ni6r6qD2cRif7NH9XQWSBAwbgJ+YcxIVyaOlljECgYEAg83pxvFsEKOnyIFBoclz
9LRbAlyxDIoY4RNigXL8gCcwMVWd2cNwOZbLgKanN2uOFXHvOCozrL5f5i6f7bHd
buwfesohD2EsN5FZ4HPsQGWTOBcJb0MXC/tJfUpKMiB8wCEm4CXezSZVNMHO4M9w
PhDP1i21jhMyUUoE2XsXUlU=
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := x509_evt.ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pfx, err := Modern2023.WithRand(rand.Reader).Encode(key, cert, nil, "test")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(pfx))
}

func TestThatPrivateKeyEncodingAddsNoAttributeForCrlSignCert(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIDFTCCAf2gAwIBAgIQI9LdZflGYvyastfzcuwqFTANBgkqhkiG9w0BAQsFADAO
MQwwCgYDVQQDDANBQzIwHhcNMjQwMjEzMTQyMzU0WhcNMjUwMjEyMTQyMzU0WjAP
MQ0wCwYDVQQDDAR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
luvPARIaLq2J5FP7oXcQsNq2y6mZ9LMhPWtwz40L+tpO7Cgy+slTFV3tkB7ioMDw
3IY5B1HeWcvy8u3Ss5unywOHghsAqYnaGht85i2LeyjWQDUqN51tabqS27AsGjK6
A7GPk5oZdAWcKLWtyYBAi2XMn910FXIj3j5wx4rvdnsWrMKGk/JSkhaZXu9ZnrfC
yhHg89LdMqYkcAuP6dvB/jlM9FoNPxVaNgSSnGNFfI4RR09nkkhhgIQBYClWEJA2
RDXV5I208Nw+5b48CibgWmpyGi25JlsbAU2kIohE4ZCZT04UKA3ahjOWHEqdbsxS
bn+NqNlZNGuhImJnzLtkxQIDAQABo24wbDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQW
BBRO579pF0JvOC/mVIQCJWq548tqKzAfBgNVHSMEGDAWgBQmbdxzWH8HeoFiXE9o
hIBTrs/0MjALBgNVHQ8EBAMCAQIwDwYDVR0RBAgwBoIEdGVzdDANBgkqhkiG9w0B
AQsFAAOCAQEAP1mcf/hnn88Dix30YxEm+nOpCtQ+hi8VDEnw+dCmE0CS9Wn55Czh
ADQcDJDkZfxlTuOqqLc5SnvVQOqiqax3WIQHXJnJTHTgRVzMivg4qaqBZncY67AV
Lpxc0iiDGzt/Om3QR0W/pZx2moZSTUnYpa+BPacjAOQglisoegBA1tbrYpBwDXLB
l0d/RNhnZlEmbF5ZcjH1CEgR41nod7vTPocnQy4VDezqKWoZfppvB3T9c15leUyV
zRkvWx4gjG4IuLqDgUHeFz5leJobNmbuXeTILUYa25H6yZtj1Tg05R8HIi0jyhSf
wsDHGrzWpMGQJx6+8KoWLKUOPrGC+qj9JQ==
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCLuuuMtYLoknlS
8ViOkxkfL+/nJZWM06LoqKlN6kktIUz6p35NYQhbxy6VWqjSTA3TR4SENuow8daF
DOfTLvYy2O0sxnEaR8yKrWhJWFuO4rKNmgeG+L24C8bdEXGBJiW38TvYXkUHL56m
X5yPxNZnC19dkbRJBPsRtXjMqrZGa+8q6jm+NNfI5RCc9MlFhu37VucuJ2LKR+U3
89CZMY8UvOaX19Pzo1RzdsdW+jeP66qCghrfnIschb6QpvzczdS96olDWdFjjXZ0
PKnO67aXFg8ary19beViGBSFRrnkk2oEhYv3BzmFZDety5ez1HimjfK06drOeO9G
NocbJbU5AgMBAAECggEAC7qD3Qq7U0RANMsXUNheCnUeoPtRo0F8ciT+GREqVURv
TrbSbjJP3kxIx7aVZxmFK4/cOrDVVYhnJkHgD6Toe3oj5lc91SPjslw93bIx9Tto
G2SrbxPf8NvkNFgre9i038y65j17c8/2dCagYJz4FiwpNBRv2pU1cdYWrq9Bn4V+
CDIAOZvj/Wud1Z8z7p/kzvu0xPvQb3+RFwVeS4mR4fA8EzXuEu2NY1PRXqdDTXO0
uA93JxrVSXoMhiFlWinZGwypZtMKqR4Esyb0smH6QL7u/HjDDWiDw4UCQd8lfOlc
BgaNIjraXl1hbjkh1znSJ7PbeuXbteg7FOi/mdv+gQKBgQDDb6/ftQ7fWN7KiOFW
3kDR82sa55gGtzBts4F20uv1IZSMGnJEbAMKTYH2UkCgZiulAxq8IWzCcGyylgmZ
grxw0zdpiDkEbcNtz0qL9l8gUMfDRdTapN4FATy4oeUQ3FJd/G2f1SRCaThn0/Zf
sB86nCqMMs7zm9l1UfuotUoAaQKBgQC3B/dFt5wxblIp6ZYBADPYymv460YXR0Jw
jlZ11ze2u4pcGRAPGCQRVQrLyM1q05wWQwlm6Cnm6ClVr2osyNEQS2oWHyl7AEZj
nb+hh6LxFMgkfSRuwp3gSJ8mhA4QJ9Ayo6+3+X47OuWwsIdEMMWDN3tnrtuhivPx
CSIKcKx0UQKBgH7G567Vk9U8oCGAE7U3LZNENVlZnJvWn7q59CSxhFEavHL6AN/z
tTEswD6acsPaIzvCvMgHYrbrGQfsHkQPs8/4o/x4WoxN67VC/9e1NVYQMNWyafZ/
dmqGt+4JTz/VvDStuCszp3bRLL7ll+/QnyF1BoC1wNv0YGcjjH2PRHbpAoGAMP5x
43il19mHJu7/F199gW+V/XjFN1/82fJQFJU6tbB39fVDhjbZGMah8DDdQ9ZHNvJU
5vYImWXWArjE/B35UJpPWIKY8PL+5JWKgWu0Y0JD3PieswNnjW0DJSU+Onbd1WBZ
ni6r6qD2cRif7NH9XQWSBAwbgJ+YcxIVyaOlljECgYEAg83pxvFsEKOnyIFBoclz
9LRbAlyxDIoY4RNigXL8gCcwMVWd2cNwOZbLgKanN2uOFXHvOCozrL5f5i6f7bHd
buwfesohD2EsN5FZ4HPsQGWTOBcJb0MXC/tJfUpKMiB8wCEm4CXezSZVNMHO4M9w
PhDP1i21jhMyUUoE2XsXUlU=
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := x509_evt.ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}

	pfx, err := Modern2023.WithRand(rand.Reader).Encode(key, cert, nil, "test")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(pfx))
}

func TestHybridParse(t *testing.T) {
	base64P12 := "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"

	p12Bytes, err := base64.StdEncoding.DecodeString(base64P12)
	if err != nil {
		t.Fatalf("could not decode pkcs#12: %v", err)
	}

	pKey, altPkey, cert, chain, err := DecodeChain(p12Bytes, "qWxdsvtM5a5YrfXB")
	if err != nil {
		t.Fatalf("could not parse pkcs#12: %v", err)
	}

	if _, ok := pKey.(*rsa.PrivateKey); !ok {
		t.Fatalf("invalid private key: got %v", reflect.TypeOf(pKey))
	}

	if _, ok := altPkey.(*x509_evt.MLDSA44); !ok {
		t.Fatalf("invalid alternate private key: got %v", reflect.TypeOf(altPkey))
	}

	if cert == nil {
		t.Fatalf("could not parse certificate")
	}

	if cert.Subject.CommonName != "hybrid" {
		t.Fatalf("certificate was not parsed correctly: got cn: %s", cert.Subject.CommonName)
	}

	if chain == nil {
		t.Fatalf("could not parse chain")
	}
}

func TestPQCParse(t *testing.T) {
	base64P12 := ""

	p12Bytes, err := base64.StdEncoding.DecodeString(base64P12)
	if err != nil {
		t.Fatalf("could not decode pkcs#12: %v", err)
	}

	pKey, altPkey, cert, chain, err := DecodeChain(p12Bytes, "2pyV2xCNKyswupz6")
	if err != nil {
		t.Fatalf("could not parse pkcs#12: %v", err)
	}

	if _, ok := pKey.(*x509_evt.MLDSA44); !ok {
		t.Fatalf("invalid private key: got %v", reflect.TypeOf(pKey))
	}

	if altPkey != nil {
		t.Fatalf("invalid alternate private key: got %v", reflect.TypeOf(altPkey))
	}

	if cert == nil {
		t.Fatalf("could not parse certificate")
	}

	if cert.Subject.CommonName != "pqc" {
		t.Fatalf("certificate was not parsed correctly: got cn: %s", cert.Subject.CommonName)
	}

	if chain == nil {
		t.Fatalf("could not parse chain")
	}
}
