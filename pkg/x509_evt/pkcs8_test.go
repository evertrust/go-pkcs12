package x509_evt

import (
	"bytes"
	"crypto/ecdh"
	"crypto/ecdsa"
	"crypto/ed25519"
	"crypto/elliptic"
	"crypto/rsa"
	"crypto/x509"
	"encoding/asn1"
	"encoding/base64"
	"encoding/hex"
	"encoding/pem"
	"reflect"
	"strings"
	"testing"
)

// Generated using:
//
//	openssl genrsa 1024 | openssl pkcs8WithAttributes -topk8 -nocrypt
var pkcs8RSAPrivateKeyHex = `30820278020100300d06092a864886f70d0101010500048202623082025e02010002818100cfb1b5bf9685ffa97b4f99df4ff122b70e59ac9b992f3bc2b3dde17d53c1a34928719b02e8fd17839499bfbd515bd6ef99c7a1c47a239718fe36bfd824c0d96060084b5f67f0273443007a24dfaf5634f7772c9346e10eb294c2306671a5a5e719ae24b4de467291bc571014b0e02dec04534d66a9bb171d644b66b091780e8d020301000102818100b595778383c4afdbab95d2bfed12b3f93bb0a73a7ad952f44d7185fd9ec6c34de8f03a48770f2009c8580bcd275e9632714e9a5e3f32f29dc55474b2329ff0ebc08b3ffcb35bc96e6516b483df80a4a59cceb71918cbabf91564e64a39d7e35dce21cb3031824fdbc845dba6458852ec16af5dddf51a8397a8797ae0337b1439024100ea0eb1b914158c70db39031dd8904d6f18f408c85fbbc592d7d20dee7986969efbda081fdf8bc40e1b1336d6b638110c836bfdc3f314560d2e49cd4fbde1e20b024100e32a4e793b574c9c4a94c8803db5152141e72d03de64e54ef2c8ed104988ca780cd11397bc359630d01b97ebd87067c5451ba777cf045ca23f5912f1031308c702406dfcdbbd5a57c9f85abc4edf9e9e29153507b07ce0a7ef6f52e60dcfebe1b8341babd8b789a837485da6c8d55b29bbb142ace3c24a1f5b54b454d01b51e2ad03024100bd6a2b60dee01e1b3bfcef6a2f09ed027c273cdbbaf6ba55a80f6dcc64e4509ee560f84b4f3e076bd03b11e42fe71a3fdd2dffe7e0902c8584f8cad877cdc945024100aa512fa4ada69881f1d8bb8ad6614f192b83200aef5edf4811313d5ef30a86cbd0a90f7b025c71ea06ec6b34db6306c86b1040670fd8654ad7291d066d06d031`

// Generated using:
//
//	openssl ecparam -genkey -name secp224r1 | openssl pkcs8WithAttributes -topk8 -nocrypt
var pkcs8P224PrivateKeyHex = `3078020100301006072a8648ce3d020106052b810400210461305f020101041cca3d72b3e88fed2684576dad9b80a9180363a5424986900e3abcab3fa13c033a0004f8f2a6372872a4e61263ed893afb919576a4cacfecd6c081a2cbc76873cf4ba8530703c6042b3a00e2205087e87d2435d2e339e25702fae1`

// Generated using:
//
//	openssl ecparam -genkey -name secp256r1 | openssl pkcs8WithAttributes -topk8 -nocrypt
var pkcs8P256PrivateKeyHex = `308187020100301306072a8648ce3d020106082a8648ce3d030107046d306b0201010420dad6b2f49ca774c36d8ae9517e935226f667c929498f0343d2424d0b9b591b43a14403420004b9c9b90095476afe7b860d8bd43568cab7bcb2eed7b8bf2fa0ce1762dd20b04193f859d2d782b1e4cbfd48492f1f533113a6804903f292258513837f07fda735`

// Generated using:
//
//	openssl ecparam -genkey -name secp384r1 | openssl pkcs8WithAttributes -topk8 -nocrypt
var pkcs8P384PrivateKeyHex = `3081b6020100301006072a8648ce3d020106052b8104002204819e30819b02010104309bf832f6aaaeacb78ce47ffb15e6fd0fd48683ae79df6eca39bfb8e33829ac94aa29d08911568684c2264a08a4ceb679a164036200049070ad4ed993c7770d700e9f6dc2baa83f63dd165b5507f98e8ff29b5d2e78ccbe05c8ddc955dbf0f7497e8222cfa49314fe4e269459f8e880147f70d785e530f2939e4bf9f838325bb1a80ad4cf59272ae0e5efe9a9dc33d874492596304bd3`

// Generated using:
//
//	openssl ecparam -genkey -name secp521r1 | openssl pkcs8 -topk8 -nocrypt
//
// Note that OpenSSL will truncate the private key if it can (i.e. it emits it
// like an integer, even though it's an OCTET STRING field). Thus if you
// regenerate this you may, randomly, find that it's a byte shorter than
// expected and the Go test will fail to recreate it exactly.
var pkcs8P521PrivateKeyHex = `3081ee020100301006072a8648ce3d020106052b810400230481d63081d3020101044200cfe0b87113a205cf291bb9a8cd1a74ac6c7b2ebb8199aaa9a5010d8b8012276fa3c22ac913369fa61beec2a3b8b4516bc049bde4fb3b745ac11b56ab23ac52e361a1818903818600040138f75acdd03fbafa4f047a8e4b272ba9d555c667962b76f6f232911a5786a0964e5edea6bd21a6f8725720958de049c6e3e6661c1c91b227cebee916c0319ed6ca003db0a3206d372229baf9dd25d868bf81140a518114803ce40c1855074d68c4e9dab9e65efba7064c703b400f1767f217dac82715ac1f6d88c74baf47a7971de4ea`

// From RFC 8410, Section 7.
var pkcs8Ed25519PrivateKeyHex = `302e020100300506032b657004220420d4ee72dbf913584ad5b6d8f1f769f8ad3afe7c28cbf1d4fbe097a88f44755842`

// Generated using:
//
//	openssl genpkey -algorithm x25519
var pkcs8X25519PrivateKeyHex = `302e020100300506032b656e0422042068ff93a73c5adefd6d498b24e588fd4daa10924d992afed01b43ca5725025a6b`

// Generated using CF
var mldsa44BCPrivateKeyHex = `3032020100300b0609608648016503040311042069f90aaac0f30e48d63ce5d0af88cd1fd4a07dd33b417cad4ab5601ce5cca1f2`

// Generated using CF
var mldsa65BCPrivateKeyHex = `3032020100300b06096086480165030403120420113dfd15b760ba6e28331ce7d0382638f451d709109ce4ca1444a4541ce6652b`

// Generated using CF
var mldsa87BCPrivateKeyHex = `3032020100300b06096086480165030403130420326c2160ed8d4b59a324df44664a44ddd5f36e808fb29b4331b62cc922515b3b`

// Generated using CF
var compositePrivateKeyHex = `3082050d020100300c060a6086480186fa6b500401048204f8308204f4308204bc020100300d06092a864886f70d0101010500048204a6308204a20201000282010100deead54fd75e9fdffbb6815e3d0023fdd8d502a255bdaff2f85abe561cb4771c83f762d371757e5579287936bb4cabb1b361482ee0956c4df1b0c7be05347c390564be38b22682f1fa6261a2ff54e0152784425bf9a59e1d01b8dc26b7a2857910658aa0e1b8243b85bed56b735e56656e455679efccde65db90ccefd63f511ff39b0fb46a73ac7c28917e1c69e15b27c18853b99cd8ce74ccab110cc8aba464111f8b382db610dfc5f032cdab6c964d2642bbd441ed284abee7ccd71dadb33d1294ac6662b58f110acd97f149092f923f25530308e0d2bce0204029ed465c59d627de71977185a81d4226216b0f3b0a4b0fcf8be60d2a01fe69194164a3b84b02030100010282010010b73149ac6507135cfa56d717373f26562fc58e760ecef67c3dbf0f66aaf8523b69bde50c6ea560dec09f339b2093b0b3e51e96e2a1071f0d244170c94e773b860bae369827f5226a06733b2d6efd8d4ddf9d63978e736874c19a4338fa9c8c4878cf72b844fe4a8c569405b0fffe4b302aa38d148df090ae173c96db77a2008c8607a29aa011e558f0e4582362f7dfa59b7cf7a5905fdff30135bba3d3d27efd79c697cf073885189d898971e52091268dac04b377f4053f4af44fccd1ab9c2bc4273edb012493c6d24ba0ca37861bf0d8dd3e7eab73e2ab03b1adb5f6a9fa4e7b15d21f4f872c53b522a04a05b3ce64aaff82c1d61571287b1c96cfac49a902818100f490382933fe2d7389390edfa393660814743cf903352b6299763a582127f3b3b88dbd23e338758a41482b8a38da2b76b1594469aa45c0f21f5dd515a80ed0a6f0865242a766b527afa8445974ab3b516d0a8c2cb4d022a80c42bcecc06d3f0e55839c43de8275e203b53e2b14280ec1d8cc4edae3b4b98ad61c3e59dc4fa2d702818100e9577aaa1feff04747e7848f1cb8703d07fd80bc797aca7cfef7785265628ae12409aa92e541886ce22122b32569157a747cb3c5ad45e0de1a469919599f5954b84f087542c41939bb3c423092a978a5ef407835fdf9f251c381b96955642b77339c723fcaa9db885776def67f27533e437b48d38746c867034407cb79ca1bad0281801cb162f56a9532adf076924928bedd64ab49abf1a72fb0c463aedc4f84ac544a4ca7cc7e0e658c5cc925f77dc307cdbba2390feeb9bc6f53b8dc6068a70bfdece8214a3b69ba821c82de620e80c2aa35f66e1b5e0f64affc395c07205bbf357bb00abde5b49067d6398b251d16c3505febd8a493c7cd674b63ad729f465acd870281802f25c7d93c1ec51402095b95771e253f8fafbf2555fe638fa20ceab8eb575fec61d5ba2b783b278fa8993d63a93974678bc5eea5107fc011e08947420203da8eedb6ba64c71acc6607d9031ec16390c726728657927bc06498f64b3a6750981fbbc3eea9c90f4d165d65dd633d09fb1de790af845e1f053b1b43d1b761625ef90281804ede7178fa9c82caf8c0436981955a9428adb485f73a6601c704296a7445627103625e3a9300243ece85ba29a7d105285402e18ff341422a515a90d9ea2f54fe414df0524d7aa566e730570b7c8d3e3ea070cf24b202425059cf65aa62f4de28a449582118d002db9a552405b2fbd8d4c9106c12134bb1224a1044e76fede65c3032020100300b06096086480165030403110420f7e827961927531419bc992db6ca47e25630cd10d6a05dcb08e399da1ef7e3bd`

// Generated using:
//
//	openssl genpkey -algorithm mldsa44
var mldsa44PrivateKeyHex = `30820a3e020100300b060960864801650304031104820a2a30820a260420ce99db60ffb0d144445a3fa1dad2d274971d126acd249656d26e1e0ae4ee572004820a0081a57bbbe8148f362680e8c6b5475f0d5907f5161e356a85832d878a26598a6f6fc4594fa5fd16c9dc5eecdab9cf9e93e942c7adabf38a9457bba9df1d8f207da4222f5844240d633392fb0ecec385b18083c072e31c85f86163c44ac587e433c49f8418503bdedffcad499865e9b7b5d251c38015c9827d1a618019e4a2af9c02a20912866c182866899830d404680a3145dca82c04020191862511b7854a3485a086080a302d4820511ac4911a38904a484693946d54302184384611b74d4c944114204c8c040ee01281d2861023b340d38404083730a42285cc9805623045c214692395719a0229644821d9084193206d52140252a251ca460552a28450024e53802858000ddc18810b858dd3965018274141122190829104456c5414320c2040d4a88c58084824856500076122432e41029010a9248b202ea2a0915914124ca865d0046c1a132a1a240260a88413b744849831d3284904860d5b00651a9341ca80886230521b38259b224521498221b36d49144e9bb88548302e02a77024a261e4208d90c0206380658828108b42918ba08419844000c76809494c8c9865043652ccc08c03b0510ba53194b88518202249c68591460d94a6654434609a226861988998207224b20920122d2234850c429152224904406a09b32019480822846810082c5122119a080c9b2412d4264d12038dc88821d03451c1104620c50d5b3064998270d1486462b885e244010a470853242812106dc1882890926003315148a02d92800cd4c2494ba404c0b6690b134d243409421411c046845bc03150404953c289c930500498685c806862026418366482c444c300724902644b109112b38c1b084422276c49b2490439480246644b9285ca466824c67011284d1aa8100426921b868860004512037121244298106820464ed2186953b821c434020bc30cd2448811266d0c272444984562080d1ca52d131606013386191145233521891209a4368c5c300911404114032444066cc80865a03429e0b42ce1106aa4484e11c66460c20910232dcaa4841a402e18396662326a84b4509a2841a0a86c491202a0844c604241a3180a48982080a84c51b011508808989045d0164c42b208ca002110b3885080001b128de1c885d4a200630046e012069ab471614081d94485cac84019484c1ca949581011d1a44009a56848b870080465db1665a3a620d1302904162c4126884c302d80108554428d4b004010b06409b271e3b62864b045191b99f0aa9183be40f0e47542975b2bde9ab36e0ab5f030e652471335205cdd59b478b3d25f801cbe26794254517d840e40ce73c38f31d20306bee83b6c2aae5d2dc9266b152c73271dac184f01b5f5c9c44415974594e8d6023b65c60394d649d999811625458a12e7b7d5482e4fe94845439f697f528958dda990499269c47f977b204fe00e06b61e695e75b9194c721b0a34d9642975b5ce12f9725a1b97970e49a574b2c3ac72fdd29ebd8766e3f628b8f517448902e744e2095c34222bfb0d6b1b3c2de7772b9e0b6823b22b6d5844621ed4379560fe828c37cb04d8e622c349f4263273dd2a2e0f613dd1487a59c0d0116675c3982b34aae2552d8684fb77919e4961284e9f0e41d06e996a460be26af548811b6d5236534f12e0e9fe1074f4c36d2ceabd4246ebefce031d8a2147e011b8024375bcde0dbbfc414ffe23c8bc6e7294a91d643d984f72c2abd25eed069b5f6f7dfa9515e1b2216a0b062ec8f0e8009dfde8cb30c8dfffcf65f95d77f8a1ea4cb3a3fb1cdd1a349fff9d2632956e0fbd1b4f5b2598279aee2b063843721871af444fa92bdf976db7e892c63165e2058ab474a7ca9186b4b67c27d6c693a331f28ecf3ec830b45f8a47c380b748ab58e682cf3be2868d10bde36fe59d6e45fdff281e86d7c12c72c2e28c6e836dce40907a7a0a6350ea8ad84bea73d0154b2d6ade72d4069d1df563209a2301605ed3c5aa6acb0c8fd7316f5a9a87e7ee2ff61484b2555037c525f7acd07670bc48d44cc408c33ca5824a4c14cb917fe1a4bb7e769a6b2a85cc0c81413b2c5b332782da99287c6627089bf58280f702ca9c96e335bcf91bd984e3a6e2dd05d3b0431dd7cd965289a3a04d9d5ecc3ad89eb9adf55b7fa3efe59ae26ca66a3e426c0298f771f29b486695007aafb98c9ccd77c46d30ae29988c82db75edb38f59eed1a357123ba2d1a9221614b05c4b799366c43c241613e9fbc693473de939b458bb0e43027e14c5df8d55276cddd3243ee6187f99247775d1f8ab7efb1c70573185d27b3baba37cd4b5f9a22dfec6a549023fef046e2d3253b5f5c4f986efe47b3414f412a4b6adaeb1542107ac99f96935524c4be3f323ca5c7d1bbed68e317cd1c9cad605a8c8501b90596a124e1ac24b5cc1b633bc9163d37bb5fbd0cb14bf8a27c402265baa3f0d38abc8bf8af6a858a2044c49810d876da882e826121ff9154981004f6e9630e084b0ec0907158edf33e74e6d7161c4842bde626ff82f94cba9e714cf4fbb52f346bd854885921cf9be4cf9dd1a609d834d89f883a5952700356e54586dd9f4de9562f23bb666b848889a9dbd3dfc14b1813b8027772e92f22d6d7cab824160f81ff8f158e494ba4b0e872926441ff0f98d94250cac5955a2d51e36fca856e1f3a28993fc61edc00e1b8e318b8db434a814f51eabd5f251a9b84e08734ddc189d0533b01b7d0242d2edafeb35ea67e17562f66e308d6ff5b17296ee7e66b4e8b2dfb9fb017b800501e74a2ae485d967135ad841a95250dd637252c12e70b039525388c9208c87bd3beb9d37aa2f05854083b8a5fb790ccb98b92285c671c3817f9a20dbc576e003dc32a705c2df71a24e4356ff28628151b4e1cbbb640d7e55013813de39a71d3be80fcc396934f4f960972282784ff5796ad15f577f97df23cb518ac2d49646d0302321d8d81bb769889a96b7c5a2b1dc257c74ef207312e9bd1d28afeed7ac8dc574322b960cb69298eb29f5bf5040be3314923f08fe210817244498cba21b2def3aa9ea5e27e282c5f09b2435eaa1f460f89b38ea01bc6e65c13acd0301ac844065a5142cd0479d93179d7fad727595130206984a2713a94f471a2be3e195a9d1a36ab952bddbeb5eec90ef25306e7c26fcef1f884b08ffa794927e2b0d494de3be00d40f7db44e701ad8fec74f697d9c8e8a7ad2389af5c50c10af2ab8eceb3f8f9f67ff57071061a9414ea7d56045fda4e2e0a39eed5af86f2747275c66084414ba9eaa0affc22983395760b742defefb31f80446875eac61ed2d2251015b3dfc0fc2188fb7e5bb943c556659c9e449fd9471922c54c202464c83acb4433705649881bf57034edbf6a3b67b604190ede4d2e026b8660d087531a743e3d81c57bf5e0829c6a7463a64df110c2860179adf5c4f7ac444313bf57fe9822c485160f9487cd3a54577e1c097f6c9712468778201501f3d89dcb20a9acee3fe12649cbbd27951437785dcdcfd8888e49cc6bc2b1161936f28f82ddeaae34e0415b57c83884fdcd3cd35aa5aa426a196d544a9b6f34fa373e92893baec3bb9e5832277052d01f8ef4f3861a19051fc`

// Generated using:
//
//	openssl genpkey -algorithm mldsa65
var mldsa65PrivateKeyHex = `30820ffe020100300b060960864801650304031204820fea30820fe60420c992b2539627c5293497914671c11496379efebe23e8e785ea6370ce55197a4d04820fc0fabf1c209ceb8e381ccebf08f08f10db44218a78815874f41ce36040b03ade007cf4d6730d481815be70984eb0960b68bdac3fcc81382b0101b80831fc5310a05c9d1089e7ab04ed9f42d8b9d5d035848076ba28928dc51efca5db1e66f5449a67fd364c1641ff1da47803817122547dcc4aa5da96137d6fb46ed871c6ccb61edf270999047d0dc4dce4e525407ff9b972a93225f3ef5e8c72c0cdb0cdf05292bd520b579b1a13cc9d28bc6a5be98f3685b2166a26a42886e747c59753ad75cd6978c9399582fe20ac2c382fcef92b9b3b945c1956b938fc59a64fed87e043824f17c58bc324b2edcd9f9ddfc44dc663808c3e7a80ab86855a81ff7d444e3c90c0e63b83eb60340c021099974aca6338a2b0f97192db77e1949a7523173e888a5b04fceab84d2caccfffba02bf3077f3aca9a37e0c04b019c5e5789cb5e538e03250f3252efecb64306ae6c7d615194b18684afd35068b1b4e646e96775df31f10506d6ea5b1094ec6e3980ef8463c804e4058ac6483dd65d539995a41256ddd93f8a69fe53d8ada2b1924b53355741f602db42a55ce4c09076bdb0ed4a4e54ff3df701ed4635ca607e51db6a88f2577d31b7055dd88ad9b68f1acfec3749094d1e914256a04de3b489bd2b89796ad9544f0cc98d46d603251c709ea4ac3161c00f186a8ea4495649216df7050855ca788a281155eb125ba68a6987510661fbbc9447f311f85799f7174c13df7a48a5ba68df5ef24ad8da9331068041c7dc30f075c2ce711a6ad60f39a17e5493959a5716d82e8668a799d54dedeb5f5ae2b109b0ddee4f898788516d1e686dc66c801cef01e23ebdebd24604d433eb41d6a4d4360008a0d7474a2a088d1a601a888405f5125f159a4397e96932e00d77ba2140322f3f40da0b529bb20d1d56575b5fb1ab0831a46967dec592632a8adc99c7160931f67aa672a40f1d42e2da4744e938822b94f755de3d112f6dfa5ce2b5f53330824c6d3085fd2be3170d0ca27d162b03591e2b16c94dc16c45aafc1f59238ed9e9475b3998b3508e6cc1e6de548100ad47000277a3bcd78895255054ef07af5a40def6ae10ba70e162fbc086bde5b0512ed30740487a582cfac55119ee1e7166055c028a0c4f36125ae1c26e43205f9a2a19caa5c45da89071af7003662669c1f6e98a561b623589d8e1d2801d890338c9ec37691cca368db8f3811e1e6512a1800e353f846dd129cd02db80a052c4d3a407eb7cbe976d17a64653b21d21b406742734155d39b27b719a7e6d2ee78b3f36a791d6ba14347cb7c83e591fd08cd2997c9d203a9a138d87f1c50be1dd2e21ccd56b25fd7774bb372a01a9b8000c4d63f3f33bdce2b510053cd00b5094a201e5f4853b3f7472129b51688529bdbbe91ba6dd6ddcf3c9401120afa425a793d08424ada4bcb70d71a0086dbb9c444393365fb2b678ad071c2af2e4e5b1c505283245043ad809e0c13cc68e27cc83289cccdf15a92c5ab548fb03ea77c28578c7cbdd6be2ab10d9b5e54166bfd0395cfab37deb33b0bdf41e7a9c9ec5228bc85793e6c18cc42f9376cf7d1f1726b8a8093f827d5a4947b895613f4a40d5a84d49addb49a063c20c07298640437aa2d05195f0bd8c4ab7793ddbac3de46b9b2fffaa93816239e55158f93472ab33eea3893e8a353b100d1fae770fa5386eead9b775c73d213bd2c5e27c09df378acdfc84262a822de80ab321b2105ad62165272ebf9ad49ba58c7afde2fd37b31dbde02d3c39de258f8dde942be236b5032375a3a3c7ae02183e93993d80b270624179798248faedccde4c55819de89d6dbb21b71fe6f9fe562c11a8eb65f153bab50f8350f0fc181095dd75042b02ecbf6d55a4cdb37b016d69f14ff34dfb5b1dcbde9c7901f19c1dda39cd711c374b151c848063da3cd6510588f1b6302d5ea34b213a4ada92decb1344af6cae5c8ac67e86be812c9f96be5b11d5a2abfe74743b418a8ee648eabf8752f2d547fc7dcf8a86cb7084dc42ae8c11c1f3358105a72b023e7a7ecc610779fc0dc2e05cd49689814dd99cb3655dab263e74f75951a5e04d7e6f8b0fb57240c5c4fe0eb5208bb9d213ea76ec48adb2ff1b99e19e7c3f14150aa177e5cdfbf7a62cf0b784518d0caf8246351f2de510721406479f93520af177657dc878bc78d523b1c18b4c096e3f5a277152670d92dc16e8b39bf209286452de7d7c84c86316dc274672a45854c77f5f39793643b59c4924dc051f62fb75e9d7fc02864e833c394a5ff75577926c9ec411ce87e45e688d070c1427c14697100f15fca5e66c21031c2db8a21ccae00b9e66a17668b3ec949ced57c3188cf1f51b8f41caa3a2a4c6547c29c9eb7b0402cd39a161a33aff5f34013e13315c0e4db0e65555a04a95702f7a5417c027b192e1e4f3b7fbeb4f637fb5bde2d57ea0e1cff80dbbd4bf639c27f3e55e8dbd509a0d422591fc4650b14257e926a4072c0d286f177ed67aba762269b8d8e752fad56b9601d5506fe120f4c1a3fd2b165b6c9db64caa546e02f8b3bf69001d7d5e08ba1853358eaaf342e8964518173993762fc81673da0a362e0964d2534a91453df803edd8801cf6819373fe012cb2f4b8a37547562fa1115839f41db8e3ad016cadd52457ade1ff34af1109035a0acf96338ff46b63590b8baf097ad0dc76907d03bb7d8d24c448f103be65376dc209f46227b35d1ffd2ca67a498bb9d97fddba4a897d63796d7758864f838f2cb08eb7f65d7c6f9f3296aacdaa1e9df41802abbf892f190f08d1273478d4f470b8fdfbcd3727e7990040da36d5bf6637a3d48d581eefce42cf47d0dd231f5b3a4a17d196527c8ef4cc3bcbd3e71aeb2c0472eeb686bc48e26104e598a4b20ccff4708c1620f9103a5f661d5fbf50c7d28172b677187e73206ac7833d7c5b372867b8fd72fa560c47e481b0d8426e5a832eba5ac24b7698dfef7777b17066338d8cdf8c0540354085eada4aa8d7c1a37ec9405a72a77e4c462137a4f758444848fd0c69221905b7fbc3f5d2d80997bee9fa6c7650e99aac707a13963d9f972ce78e356998669054dde68d10b2ef9d151fe05485d3b492cd999793864065a8c26929284a90f7e878eae9af89aa12b584737508608cb1760f144e751091e27cd570a6151c07f94a766a6c1c5786902813e6ddb537b308012d64a36fb2b15a5b4292b1c2807df08306bafa0b028d833d55332640b9473754131cabc928935007713160b53363d6f492a4ae6d287a68c2b11e3d5175fb94065eab9d31066ff44832420d9d261fe939c7a6e5bc2e8386a69ea1e1cbd52eb70e6d6a378f70036b8d8e481e75bb7c427c65e676386975fed8db9dcbe47f3971a76a2ab91e0625bfa578117230f48bdf63867487221a5b17b03a78230e4c957830a416d266d6e965e005d5d60039e937031720645d7f1906fa984d3a079483bcaac9412e2032a42920c53da372fae1403af020a9c8216c633d8be7dd7d772722f939f2b5316325e0c19c3992f4228e764f8bb08fbde5b6467b551178178cdbb5ba6ef46f9db172033828a2bb1d8957b8b566b374582768a3650d4c715f817f01420b8f56467675684d06c90fc4b9007a713cd7bbe2a2dc6a8fa62f9e66f0b113275594f9187ad606250bc2e6a8a7b2b911ceeffe09d9ac7937b2b99102816dfdb3211b5ab8c2bb36ae733b`

// Generated using:
//
//	openssl genpkey -algorithm mldsa87
var mldsa87PrivateKeyHex = ``

func TestPKCS8(t *testing.T) {
	tests := []struct {
		name       string
		keyHex     string
		keyType    reflect.Type
		altKeyType reflect.Type
		curve      elliptic.Curve
	}{
		{
			name:    "RSA private key",
			keyHex:  pkcs8RSAPrivateKeyHex,
			keyType: reflect.TypeOf(&rsa.PrivateKey{}),
		},
		{
			name:    "P-224 private key",
			keyHex:  pkcs8P224PrivateKeyHex,
			keyType: reflect.TypeOf(&ecdsa.PrivateKey{}),
			curve:   elliptic.P224(),
		},
		{
			name:    "P-256 private key",
			keyHex:  pkcs8P256PrivateKeyHex,
			keyType: reflect.TypeOf(&ecdsa.PrivateKey{}),
			curve:   elliptic.P256(),
		},
		{
			name:    "P-384 private key",
			keyHex:  pkcs8P384PrivateKeyHex,
			keyType: reflect.TypeOf(&ecdsa.PrivateKey{}),
			curve:   elliptic.P384(),
		},
		{
			name:    "P-521 private key",
			keyHex:  pkcs8P521PrivateKeyHex,
			keyType: reflect.TypeOf(&ecdsa.PrivateKey{}),
			curve:   elliptic.P521(),
		},
		{
			name:    "Ed25519 private key",
			keyHex:  pkcs8Ed25519PrivateKeyHex,
			keyType: reflect.TypeOf(ed25519.PrivateKey{}),
		},
		{
			name:    "X25519 private key",
			keyHex:  pkcs8X25519PrivateKeyHex,
			keyType: reflect.TypeOf(&ecdh.PrivateKey{}),
		},
		{
			name:    "BC MLDSA-44 private key",
			keyHex:  mldsa44BCPrivateKeyHex,
			keyType: reflect.TypeOf(&MLDSA44{}),
		},
		{
			name:    "BC MLDSA-65 private key",
			keyHex:  mldsa65BCPrivateKeyHex,
			keyType: reflect.TypeOf(&MLDSA65{}),
		},
		{
			name:    "BC MLDSA-87 private key",
			keyHex:  mldsa87BCPrivateKeyHex,
			keyType: reflect.TypeOf(&MLDSA87{}),
		},
		{
			name:    "OpenSSL MLDSA-44 private key",
			keyHex:  mldsa44PrivateKeyHex,
			keyType: reflect.TypeOf(&MLDSA44{}),
		},
		{
			name:    "OpenSSL MLDSA-65 private key",
			keyHex:  mldsa65PrivateKeyHex,
			keyType: reflect.TypeOf(&MLDSA65{}),
		},
		{
			name:    "OpenSSL MLDSA-87 private key",
			keyHex:  mldsa87PrivateKeyHex,
			keyType: reflect.TypeOf(&MLDSA87{}),
		},
		{
			name:       "composite private key",
			keyHex:     compositePrivateKeyHex,
			keyType:    reflect.TypeOf(&rsa.PrivateKey{}),
			altKeyType: reflect.TypeOf(&MLDSA44{}),
		},
	}

	for _, test := range tests {
		derBytes, err := hex.DecodeString(test.keyHex)
		if err != nil {
			t.Errorf("%s: failed to decode hex: %s", test.name, err)
			continue
		}
		privKey, altPKey, err := ParsePKCS8PrivateKey(derBytes)
		if err != nil {
			t.Errorf("%s: failed to decode PKCS#8: %s", test.name, err)
			continue
		}
		if reflect.TypeOf(privKey) != test.keyType {
			t.Errorf("%s: decoded PKCS#8 returned unexpected key type: %T", test.name, privKey)
			continue
		}
		if ecKey, isEC := privKey.(*ecdsa.PrivateKey); isEC && ecKey.Curve != test.curve {
			t.Errorf("%s: decoded PKCS#8 returned unexpected curve %#v", test.name, ecKey.Curve)
			continue
		}
		if test.altKeyType != nil && reflect.TypeOf(altPKey) != test.altKeyType {
			t.Errorf("%s: decoded PKCS#8 returned unexpected alternate key type: %T", test.name, altPKey)
			continue
		}
		// FIXME: marshal should probably marshal composite ?
		if altPKey == nil {
			reserialised, err := MarshalPKCS8PrivateKey(privKey)
			if err != nil {
				t.Errorf("%s: failed to marshal into PKCS#8: %s", test.name, err)
				continue
			}
			if !bytes.Equal(derBytes, reserialised) {
				t.Errorf("%s: marshaled PKCS#8 didn't match original: got %x, want %x", test.name, reserialised, derBytes)
				continue
			}
		}

		if ecKey, isEC := privKey.(*ecdsa.PrivateKey); isEC {
			ecdhKey, err := ecKey.ECDH()
			if err != nil {
				if ecKey.Curve != elliptic.P224() {
					t.Errorf("%s: failed to convert to ecdh: %s", test.name, err)
				}
				continue
			}
			reserialised, err := MarshalPKCS8PrivateKey(ecdhKey)
			if err != nil {
				t.Errorf("%s: failed to marshal into PKCS#8: %s", test.name, err)
				continue
			}
			if !bytes.Equal(derBytes, reserialised) {
				t.Errorf("%s: marshaled PKCS#8 didn't match original: got %x, want %x", test.name, reserialised, derBytes)
				continue
			}
		}
	}
}

const hexPKCS8TestPKCS1Key = "3082025c02010002818100b1a1e0945b9289c4d3f1329f8a982c4a2dcd59bfd372fb8085a9c517554607ebd2f7990eef216ac9f4605f71a03b04f42a5255b158cf8e0844191f5119348baa44c35056e20609bcf9510f30ead4b481c81d7865fb27b8e0090e112b717f3ee08cdfc4012da1f1f7cf2a1bc34c73a54a12b06372d09714742dd7895eadde4aa5020301000102818062b7fa1db93e993e40237de4d89b7591cc1ea1d04fed4904c643f17ae4334557b4295270d0491c161cb02a9af557978b32b20b59c267a721c4e6c956c2d147046e9ae5f2da36db0106d70021fa9343455f8f973a4b355a26fd19e6b39dee0405ea2b32deddf0f4817759ef705d02b34faab9ca93c6766e9f722290f119f34449024100d9c29a4a013a90e35fd1be14a3f747c589fac613a695282d61812a711906b8a0876c6181f0333ca1066596f57bff47e7cfcabf19c0fc69d9cd76df743038b3cb024100d0d3546fecf879b5551f2bd2c05e6385f2718a08a6face3d2aecc9d7e03645a480a46c81662c12ad6bd6901e3bd4f38029462de7290859567cdf371c79088d4f024100c254150657e460ea58573fcf01a82a4791e3d6223135c8bdfed69afe84fbe7857274f8eb5165180507455f9b4105c6b08b51fe8a481bb986a202245576b713530240045700003b7a867d0041df9547ae2e7f50248febd21c9040b12dae9c2feab0d3d4609668b208e4727a3541557f84d372ac68eaf74ce1018a4c9a0ef92682c8fd02405769731480bb3a4570abf422527c5f34bf732fa6c1e08cc322753c511ce055fac20fc770025663ad3165324314df907f1f1942f0448a7e9cdbf87ecd98b92156"
const hexPKCS8TestECKey = "3081a40201010430bdb9839c08ee793d1157886a7a758a3c8b2a17a4df48f17ace57c72c56b4723cf21dcda21d4e1ad57ff034f19fcfd98ea00706052b81040022a16403620004feea808b5ee2429cfcce13c32160e1c960990bd050bb0fdf7222f3decd0a55008e32a6aa3c9062051c4cba92a7a3b178b24567412d43cdd2f882fa5addddd726fe3e208d2c26d733a773a597abb749714df7256ead5105fa6e7b3650de236b50"

var pkcs8MismatchKeyTests = []struct {
	hexKey        string
	errorContains string
}{
	{hexKey: hexPKCS8TestECKey, errorContains: "use ParseECPrivateKey instead"},
	{hexKey: hexPKCS8TestPKCS1Key, errorContains: "use ParsePKCS1PrivateKey instead"},
}

func TestPKCS8MismatchKeyFormat(t *testing.T) {
	for i, test := range pkcs8MismatchKeyTests {
		derBytes, _ := hex.DecodeString(test.hexKey)
		_, _, err := ParsePKCS8PrivateKey(derBytes)
		if !strings.Contains(err.Error(), test.errorContains) {
			t.Errorf("#%d: expected error containing %q, got %s", i, test.errorContains, err)
		}
	}
}

func TestEncoding(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIDFTCCAf2gAwIBAgIQEBA8PccE/bx1uR/v13CfXDANBgkqhkiG9w0BAQsFADAO
MQwwCgYDVQQDDANBQzIwHhcNMjQwMjEzMTQwMzQ1WhcNMjUwMjEyMTQwMzQ1WjAP
MQ0wCwYDVQQDDAR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
luvPARIaLq2J5FP7oXcQsNq2y6mZ9LMhPWtwz40L+tpO7Cgy+slTFV3tkB7ioMDw
3IY5B1HeWcvy8u3Ss5unywOHghsAqYnaGht85i2LeyjWQDUqN51tabqS27AsGjK6
A7GPk5oZdAWcKLWtyYBAi2XMn910FXIj3j5wx4rvdnsWrMKGk/JSkhaZXu9ZnrfC
yhHg89LdMqYkcAuP6dvB/jlM9FoNPxVaNgSSnGNFfI4RR09nkkhhgIQBYClWEJA2
RDXV5I208Nw+5b48CibgWmpyGi25JlsbAU2kIohE4ZCZT04UKA3ahjOWHEqdbsxS
bn+NqNlZNGuhImJnzLtkxQIDAQABo24wbDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQW
BBRO579pF0JvOC/mVIQCJWq548tqKzAfBgNVHSMEGDAWgBQmbdxzWH8HeoFiXE9o
hIBTrs/0MjALBgNVHQ8EBAMCB4AwDwYDVR0RBAgwBoIEdGVzdDANBgkqhkiG9w0B
AQsFAAOCAQEAGpb/+GpOfiLe3oGwAF9mIIpKNsUvKwwjyDsKB0jDZ/pDmU8LC/GT
iAjdLpPh53wRY9zzRNfgF0GO5gN3g3Eo2ULlLJxgtYlwqhrpbLjqbtFLTtuDyQ/V
waIQpBiZwI3GgzZ2+UZn3CNjgT5Ok7Qx0So4vtyp+JqUGphh7b+xsfWAhKr1vZHO
ZnYlJvPhNbi6sxrnkDT8ER00zhYYT88nl1rvXy5RvGvuLv7toohOp2z1rlRi9Gtt
SQBwvvB1HlA+U57VfqatoqP8zwuLEyiJgHjKzcUqYsS2g2Uid/EvjKnw9mgJ2Jnr
kRZdU0OmPc5ZQAWwKh41MLS8+gHYZOVidQ==
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEzQIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC3LXzP7mmV17xk
BDxvy1quDEVhmtAlWN5r494KMSxzJ4+vG1p6EqXXng8iDtRzAps+J0qqSSwwrctX
4p0YuHlNZTN6g4tT+Fujug8g31D6nF1Kw4gDcNY2o0ksABQxHDlZrzrrbkHcLfQ8
nyAAGICtpMNfWR30qEfulYD0xNqUHho2KaNhMjSLkq3cCrNx792XJpRdHv6Er1Kw
iKlJ+nknQpuubTDTb8RPK8tOE6RtA4+ymCQ1Et1++CEeqhvq1P/desDzVRmeePHf
lTjmRJACyFlRrXTteKmURkv32QPTP51xOE5om9KmIxnxZxpwoAiJSVz/vl18G7qm
kbtRXNs9AgMBAAECggEAGGV6CJWHwXm8sRNxWzBZ0PF4ciH00+yMnxD3uyLGeUXN
GLTLbZO7O8bk3BPejrzLoVEJXDmnpYoYGYnog2jaWwj9/LS1Y0ciKWG37xhfCCm4
MSNuo4qtNRS1Q6N1DP9l0gCJF98U7Xa/Xy2QTQL2bGoTzUiouTOKdQe7Z54qQGyy
GHb4VUQkSchmqAMopJRyIuZ0aICxr5TRKlu4I2DU+MTceA2u50fWfeiJ7xJ2GbBm
u19Jus2Efch4DO2bWbSLMtyJJaxj+yQyPFFV5VPRT0YtWyH1VLdwDOxicMbhWQEn
r616dEOJ1ptBqaTfdqIbcWnBZ0n/VMUKx8YJUpumQQKBgQDpPz1jwWvPcslFOObV
MY+yTVxOjOmd2vB41n6xtQVzB0sSik/4pT8OQ0iHHOGtXZiPfw728Y3stmZr9eAO
LSkVN7rmcE5GkT7FmlmYT8+sXBWSJsmJ+dYie8UsyChkRGkt+T21Mszs4rOIT1Zk
KFr4QUf5znbAACNpuYRqEL1r4QKBgQDJC+QsnKMywWUTRvL8iqJ2IFDifb8WXTX6
nzj7YIv02NV2fX2NcQZDhfg9y47Q+MpaNGLEaL7Xqzn5ZZHHBN8ODPO41fQyItKw
PJ9p5gzAe5W1fNOvZMOw89wEXCiEdg3rsotkliPj/BjZY9AgP6FYgPx67uVfm0DY
hTPh6h363QKBgH7ySWJCwn+stLi1KIU+LTxY+HVUIk4k/B54d4oWwPmDLavQlYf5
wCDuI8pNwNJPj5oCCE4E2D7OY148+w4cLDD9HP8QfrnPkX+Q61SHk7r2f1MFQ0mS
LaalAILICZvQ1AIOljRJitke5aG5tIZcpG5bcWYXpfAH4z5Glzf3FnFhAoGBAI9D
fwRfVlg7wff7rflSHTUKEDllm/6my2ldfvB6uyDuRybZg9d/vBPv6pa2cH3vW9rt
y5fkgGIVLQnQXBIzIXPUvPRw2kPD1tkpSfvfqCSdrHAYlIw+xMha7eTZezHxIjhc
EcLKzqaOpXJ8Evp3/VShDcnYZPE9I/dm7DLHbzetAoGBAI3cXMLQ0EtYiLzne2Ed
rz1OsdEENYa4tcnLgDeCb3CIfzd7JSS/e4rhrKtkPinFn5PACyoGcL3DcBxR4Smb
EKr/kSWhA3QCCI3VvDk9ig+v/sBGYXzKrubtniDqcHGskFZ70w15uFA+95II0pjH
ayzhr3Fk02N0kDKS6Uz58HBCoA0wCwYDVR0PMQQDAgeA
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	asn1Data, err := MarshalPKCS8PrivateKeyWithAttributes(cert, key)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(asn1Data))
}

func TestThatPrivateKeyEncodingAddsAttributeForDigitalSignatureCert(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIDFTCCAf2gAwIBAgIQEBA8PccE/bx1uR/v13CfXDANBgkqhkiG9w0BAQsFADAO
MQwwCgYDVQQDDANBQzIwHhcNMjQwMjEzMTQwMzQ1WhcNMjUwMjEyMTQwMzQ1WjAP
MQ0wCwYDVQQDDAR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
luvPARIaLq2J5FP7oXcQsNq2y6mZ9LMhPWtwz40L+tpO7Cgy+slTFV3tkB7ioMDw
3IY5B1HeWcvy8u3Ss5unywOHghsAqYnaGht85i2LeyjWQDUqN51tabqS27AsGjK6
A7GPk5oZdAWcKLWtyYBAi2XMn910FXIj3j5wx4rvdnsWrMKGk/JSkhaZXu9ZnrfC
yhHg89LdMqYkcAuP6dvB/jlM9FoNPxVaNgSSnGNFfI4RR09nkkhhgIQBYClWEJA2
RDXV5I208Nw+5b48CibgWmpyGi25JlsbAU2kIohE4ZCZT04UKA3ahjOWHEqdbsxS
bn+NqNlZNGuhImJnzLtkxQIDAQABo24wbDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQW
BBRO579pF0JvOC/mVIQCJWq548tqKzAfBgNVHSMEGDAWgBQmbdxzWH8HeoFiXE9o
hIBTrs/0MjALBgNVHQ8EBAMCB4AwDwYDVR0RBAgwBoIEdGVzdDANBgkqhkiG9w0B
AQsFAAOCAQEAGpb/+GpOfiLe3oGwAF9mIIpKNsUvKwwjyDsKB0jDZ/pDmU8LC/GT
iAjdLpPh53wRY9zzRNfgF0GO5gN3g3Eo2ULlLJxgtYlwqhrpbLjqbtFLTtuDyQ/V
waIQpBiZwI3GgzZ2+UZn3CNjgT5Ok7Qx0So4vtyp+JqUGphh7b+xsfWAhKr1vZHO
ZnYlJvPhNbi6sxrnkDT8ER00zhYYT88nl1rvXy5RvGvuLv7toohOp2z1rlRi9Gtt
SQBwvvB1HlA+U57VfqatoqP8zwuLEyiJgHjKzcUqYsS2g2Uid/EvjKnw9mgJ2Jnr
kRZdU0OmPc5ZQAWwKh41MLS8+gHYZOVidQ==
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCW688BEhourYnk
U/uhdxCw2rbLqZn0syE9a3DPjQv62k7sKDL6yVMVXe2QHuKgwPDchjkHUd5Zy/Ly
7dKzm6fLA4eCGwCpidoaG3zmLYt7KNZANSo3nW1pupLbsCwaMroDsY+Tmhl0BZwo
ta3JgECLZcyf3XQVciPePnDHiu92exaswoaT8lKSFple71met8LKEeDz0t0ypiRw
C4/p28H+OUz0Wg0/FVo2BJKcY0V8jhFHT2eSSGGAhAFgKVYQkDZENdXkjbTw3D7l
vjwKJuBaanIaLbkmWxsBTaQiiEThkJlPThQoDdqGM5YcSp1uzFJuf42o2Vk0a6Ei
YmfMu2TFAgMBAAECggEAHAxvSG+o1gwCmKDTH0sVmwjK+EbpCgVQpC2Xpbs9Ar4X
9OPztZA9FLeEM0jKLb4uBY4cgzO/80hoOqXghuji4mQhhxilotyv4DJDoDPOvHD2
gLBgzD1B3GiEarfvOl87GvyhBnmZSWrRfu9lARII7N9ajEuIC4RPDjrkkvFLV+V3
XLYN4/QiilcveHqgkWZkT6mqUnTeCCntw3gAuGNyUKZzF6SpoLeBX8E14boNOa5n
0kNwLb7tf8F6OM3Y4R2wWB1OXYIKwFiTswIYVDYuP6phIlJuqTw5JnRrkgSY3Auf
Yy3DrldQ9u8Ry7J/8LweshiL3sAYfSNuTtJOIodqgQKBgQDGUcMDhBSs6gs/zSxY
W4xNtSYfefIgMr+cjUvbhcToX3tVNTOEhFUUlPAsN+NBM2qmKK/8R79hYSQeg8Ny
KR8H1l0sJroZk5kKModpVfqf61TSipsdoGHyknKxynvX4FNHS9umzJ3kwgLlEb9F
WgwdcLHi4YMkSYeddgVknsLbTQKBgQDC0Ovz2EBhK2m5lkHumQeFxNe0cTxIXqaY
ayk2GzHy1vhnRD32qsDmjx4zuCdCKyHfoTPW4PWNuldacqI3/4RRs5d0dvHzlwjG
UmjGogtpbCD0y5wAwNjoe1lZR/y6VnqJcTicA9rqHfqIoNv6Grf62dYd+PCp1gre
C7A5TfhDWQKBgCdnBUUEkAsO8S86942SmtyxmiJ02xt0mcdj92dlO4sjtWBnkpXI
qRLOyK0waXGB4rWirdyE8MxLPZ7mdQWQj/7Bo39rLlx4i9aP1YGjOIlfe1ndehY3
0F4epLUYUuTASCuJMdoBG3ng5ixXC1afHnsW8fDu91xVU6GAWm/0byidAoGAXGph
VAaE29ONTtWhpz7+2406SkXhM+96lhlXrmwOMMWbhtlPj6EG6xh/WkeEkBYH9p7x
CYEj2zzHTYfNvkS/D0bjlQML2eMO7Y2QWJHsWfFKXPXtpknVW8uP4hONJxP5AxQr
p48InUDlZUTxtV5RYnVN5l/+QoLgGt9ulHCRUdkCgYEAunNFGBfZXj74t2pDkZIL
L8BwL5x8DEENUajGNIW7rJkwH632rXFnDvTjcQ9VtvgVXWXak83874U3Y6rBIR7C
n2EPOuMaB6Y1ViTzUsW3Ql4FlE/5bF372zbZxwy0DGKGt+Wpqlh980itiSQ+tz6J
rOCwZ+pNzdfXa2rpLwN7uCk=
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	asn1val, err := MarshalPKCS8PrivateKeyWithAttributes(cert, key)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(asn1val))
	var privateKeyWithAttr pkcs8WithAttributes
	_, err = asn1.Unmarshal(asn1val, &privateKeyWithAttr)
	if err != nil {
		t.Fatal(err)
	}
	if len(privateKeyWithAttr.Attributes) != 1 || len(privateKeyWithAttr.Attributes[0].Values) != 1 || int(privateKeyWithAttr.Attributes[0].Values[0].Bytes[0]) != 0b10000000 {
		t.Fatal("key should have digitalsignature only")
	}
}

func TestThatPrivateKeyEncodingAddsAttributeForKeyEnciphermentCert(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIDFTCCAf2gAwIBAgIQLojxnS/xQX/jQfzXgdvlSjANBgkqhkiG9w0BAQsFADAO
MQwwCgYDVQQDDANBQzIwHhcNMjQwMjEzMTQyMjAxWhcNMjUwMjEyMTQyMjAxWjAP
MQ0wCwYDVQQDDAR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
luvPARIaLq2J5FP7oXcQsNq2y6mZ9LMhPWtwz40L+tpO7Cgy+slTFV3tkB7ioMDw
3IY5B1HeWcvy8u3Ss5unywOHghsAqYnaGht85i2LeyjWQDUqN51tabqS27AsGjK6
A7GPk5oZdAWcKLWtyYBAi2XMn910FXIj3j5wx4rvdnsWrMKGk/JSkhaZXu9ZnrfC
yhHg89LdMqYkcAuP6dvB/jlM9FoNPxVaNgSSnGNFfI4RR09nkkhhgIQBYClWEJA2
RDXV5I208Nw+5b48CibgWmpyGi25JlsbAU2kIohE4ZCZT04UKA3ahjOWHEqdbsxS
bn+NqNlZNGuhImJnzLtkxQIDAQABo24wbDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQW
BBRO579pF0JvOC/mVIQCJWq548tqKzAfBgNVHSMEGDAWgBQmbdxzWH8HeoFiXE9o
hIBTrs/0MjALBgNVHQ8EBAMCBSAwDwYDVR0RBAgwBoIEdGVzdDANBgkqhkiG9w0B
AQsFAAOCAQEAWmQ5U+BwvCyw7jvrkNsIbyG7tUsYdIzJ3TMzgD7Ts5LsPvQXDn9B
7rcp7O8h8obAW+ThtguzbDONdJrgipTkmLYxKEBDyQGi7PEmLzDGyduG+wS2ddhS
Mtl9Z1hS2MbGbwWwxkdWqj2UH9eop8MMWvcejaIV1ztLT6wVdHHRxzQshcd8nAjU
FVC81e0WPpAKWHfitM2zKy3tj7yQJmCk6/tZgQJC/hLPR/BR2euh1xlJUih2reNR
4LMAe6aCxSQ+3kDGg5Tht5/M4yfdn/JNCQGMQJY/yUuWyizuflInnWAMyjAoH64k
9lD9jGhvOqlvVXOx9mEZwXEZf53y18CSgA==
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCW688BEhourYnk
U/uhdxCw2rbLqZn0syE9a3DPjQv62k7sKDL6yVMVXe2QHuKgwPDchjkHUd5Zy/Ly
7dKzm6fLA4eCGwCpidoaG3zmLYt7KNZANSo3nW1pupLbsCwaMroDsY+Tmhl0BZwo
ta3JgECLZcyf3XQVciPePnDHiu92exaswoaT8lKSFple71met8LKEeDz0t0ypiRw
C4/p28H+OUz0Wg0/FVo2BJKcY0V8jhFHT2eSSGGAhAFgKVYQkDZENdXkjbTw3D7l
vjwKJuBaanIaLbkmWxsBTaQiiEThkJlPThQoDdqGM5YcSp1uzFJuf42o2Vk0a6Ei
YmfMu2TFAgMBAAECggEAHAxvSG+o1gwCmKDTH0sVmwjK+EbpCgVQpC2Xpbs9Ar4X
9OPztZA9FLeEM0jKLb4uBY4cgzO/80hoOqXghuji4mQhhxilotyv4DJDoDPOvHD2
gLBgzD1B3GiEarfvOl87GvyhBnmZSWrRfu9lARII7N9ajEuIC4RPDjrkkvFLV+V3
XLYN4/QiilcveHqgkWZkT6mqUnTeCCntw3gAuGNyUKZzF6SpoLeBX8E14boNOa5n
0kNwLb7tf8F6OM3Y4R2wWB1OXYIKwFiTswIYVDYuP6phIlJuqTw5JnRrkgSY3Auf
Yy3DrldQ9u8Ry7J/8LweshiL3sAYfSNuTtJOIodqgQKBgQDGUcMDhBSs6gs/zSxY
W4xNtSYfefIgMr+cjUvbhcToX3tVNTOEhFUUlPAsN+NBM2qmKK/8R79hYSQeg8Ny
KR8H1l0sJroZk5kKModpVfqf61TSipsdoGHyknKxynvX4FNHS9umzJ3kwgLlEb9F
WgwdcLHi4YMkSYeddgVknsLbTQKBgQDC0Ovz2EBhK2m5lkHumQeFxNe0cTxIXqaY
ayk2GzHy1vhnRD32qsDmjx4zuCdCKyHfoTPW4PWNuldacqI3/4RRs5d0dvHzlwjG
UmjGogtpbCD0y5wAwNjoe1lZR/y6VnqJcTicA9rqHfqIoNv6Grf62dYd+PCp1gre
C7A5TfhDWQKBgCdnBUUEkAsO8S86942SmtyxmiJ02xt0mcdj92dlO4sjtWBnkpXI
qRLOyK0waXGB4rWirdyE8MxLPZ7mdQWQj/7Bo39rLlx4i9aP1YGjOIlfe1ndehY3
0F4epLUYUuTASCuJMdoBG3ng5ixXC1afHnsW8fDu91xVU6GAWm/0byidAoGAXGph
VAaE29ONTtWhpz7+2406SkXhM+96lhlXrmwOMMWbhtlPj6EG6xh/WkeEkBYH9p7x
CYEj2zzHTYfNvkS/D0bjlQML2eMO7Y2QWJHsWfFKXPXtpknVW8uP4hONJxP5AxQr
p48InUDlZUTxtV5RYnVN5l/+QoLgGt9ulHCRUdkCgYEAunNFGBfZXj74t2pDkZIL
L8BwL5x8DEENUajGNIW7rJkwH632rXFnDvTjcQ9VtvgVXWXak83874U3Y6rBIR7C
n2EPOuMaB6Y1ViTzUsW3Ql4FlE/5bF372zbZxwy0DGKGt+Wpqlh980itiSQ+tz6J
rOCwZ+pNzdfXa2rpLwN7uCk=
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	asn1val, err := MarshalPKCS8PrivateKeyWithAttributes(cert, key)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(asn1val))
	var privateKeyWithAttr pkcs8WithAttributes
	_, err = asn1.Unmarshal(asn1val, &privateKeyWithAttr)
	if err != nil {
		t.Fatal(err)
	}
	if len(privateKeyWithAttr.Attributes) != 1 || len(privateKeyWithAttr.Attributes[0].Values) != 1 || int(privateKeyWithAttr.Attributes[0].Values[0].Bytes[0]) != 0b00010000 {
		t.Fatal("key should have dataencipherment only")
	}
}

func TestThatPrivateKeyEncodingAddsAttributesForCertHavingBoth(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIEdjCCAl6gAwIBAgIQfazpyXuiva0/DAJESzOgpzANBgkqhkiG9w0BAQsFADBD
MQswCQYDVQQGEwJGUjESMBAGA1UEChMJRXZlclRydXN0MSAwHgYDVQQDExdFdmVy
VHJ1c3QgUUEgSXNzdWluZyBDQTAeFw0yNDAyMDYwOTE1MDdaFw0yNTAyMDUwOTE1
MDdaMBMxETAPBgNVBAMMCHJhbmRvbWNuMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
MIIBCgKCAQEAi7rrjLWC6JJ5UvFYjpMZHy/v5yWVjNOi6KipTepJLSFM+qd+TWEI
W8culVqo0kwN00eEhDbqMPHWhQzn0y72MtjtLMZxGkfMiq1oSVhbjuKyjZoHhvi9
uAvG3RFxgSYlt/E72F5FBy+epl+cj8TWZwtfXZG0SQT7EbV4zKq2RmvvKuo5vjTX
yOUQnPTJRYbt+1bnLidiykflN/PQmTGPFLzml9fT86NUc3bHVvo3j+uqgoIa35yL
HIW+kKb83M3UveqJQ1nRY412dDypzuu2lxYPGq8tfW3lYhgUhUa55JNqBIWL9wc5
hWQ3rcuXs9R4po3ytOnaznjvRjaHGyW1OQIDAQABo4GVMIGSMAwGA1UdEwEB/wQC
MAAwHQYDVR0OBBYEFL+WkjeE64csX65rIklnsZmnKWodMB8GA1UdIwQYMBaAFBQQ
3LAzCfegGprKagjWFldyJcCpMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggr
BgEFBQcDAgYIKwYBBQUHAwEwEwYDVR0RBAwwCoIIa3RvLnRlc3QwDQYJKoZIhvcN
AQELBQADggIBAHLR5xnZUxNohETkK8GvOn+4OZ+4BUz6pdgGF/xj9talMQQiQoEO
4XVIjeaBk4N8caRG4G0hEicDuBup138BhMXyOzE1jjpQ+0QfeeXeFlJ9wCZ0C5Ot
jseQQhV48e8UGHLB8lJKXJnb7VidUY5kjzW3QCszf32Y7kSRCQvQ0sujz9qgi+2F
N0+owprng2T9bRsDGN5CBMvBEz0KAryTrDPy0+W0K5agl0W/NWZ3Wt38sX3tvZiG
tS2ogocl4Lfq3XTlfJ/Mw1B2a9ncIHHwPyY3Lpvqbc6fukZkGXMeoYceBRnvJy3A
qdd+2StUu4JWzUNDD80Dcb1JkZFM7GxeUqphGxdmqQEW39mVydzwK9DZQdKb5vxR
VWE9OlRRyz5prnCEKdwOQu4p27//DJnEVODDZWO4k8h858ejeuOJR9xkP8QKwr1B
hQldRL1RGAmtpXEC9Ysmz5GC7ho1frlArsA+GECTY2Pee00WY40AtU44qZwtRO/W
OwVlvGseGI+1EjFXvZRutx4Tbvi9TP/9hY3NYf5RpFzuXCPJe7HDVyRzNz9ePNB0
ImYunPr0MI5Aj35IwcjItD+K7Roamoek6AmwLE2y5JQxKcHdglmQWpgksftzgZCw
NaMYk5FEuLn9lcMcbjS79RKwPSsZ2HnrKY4CvNnuZMSbsboAubZV7rut
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCLuuuMtYLoknlS
8ViOkxkfL+/nJZWM06LoqKlN6kktIUz6p35NYQhbxy6VWqjSTA3TR4SENuow8daF
DOfTLvYy2O0sxnEaR8yKrWhJWFuO4rKNmgeG+L24C8bdEXGBJiW38TvYXkUHL56m
X5yPxNZnC19dkbRJBPsRtXjMqrZGa+8q6jm+NNfI5RCc9MlFhu37VucuJ2LKR+U3
89CZMY8UvOaX19Pzo1RzdsdW+jeP66qCghrfnIschb6QpvzczdS96olDWdFjjXZ0
PKnO67aXFg8ary19beViGBSFRrnkk2oEhYv3BzmFZDety5ez1HimjfK06drOeO9G
NocbJbU5AgMBAAECggEAC7qD3Qq7U0RANMsXUNheCnUeoPtRo0F8ciT+GREqVURv
TrbSbjJP3kxIx7aVZxmFK4/cOrDVVYhnJkHgD6Toe3oj5lc91SPjslw93bIx9Tto
G2SrbxPf8NvkNFgre9i038y65j17c8/2dCagYJz4FiwpNBRv2pU1cdYWrq9Bn4V+
CDIAOZvj/Wud1Z8z7p/kzvu0xPvQb3+RFwVeS4mR4fA8EzXuEu2NY1PRXqdDTXO0
uA93JxrVSXoMhiFlWinZGwypZtMKqR4Esyb0smH6QL7u/HjDDWiDw4UCQd8lfOlc
BgaNIjraXl1hbjkh1znSJ7PbeuXbteg7FOi/mdv+gQKBgQDDb6/ftQ7fWN7KiOFW
3kDR82sa55gGtzBts4F20uv1IZSMGnJEbAMKTYH2UkCgZiulAxq8IWzCcGyylgmZ
grxw0zdpiDkEbcNtz0qL9l8gUMfDRdTapN4FATy4oeUQ3FJd/G2f1SRCaThn0/Zf
sB86nCqMMs7zm9l1UfuotUoAaQKBgQC3B/dFt5wxblIp6ZYBADPYymv460YXR0Jw
jlZ11ze2u4pcGRAPGCQRVQrLyM1q05wWQwlm6Cnm6ClVr2osyNEQS2oWHyl7AEZj
nb+hh6LxFMgkfSRuwp3gSJ8mhA4QJ9Ayo6+3+X47OuWwsIdEMMWDN3tnrtuhivPx
CSIKcKx0UQKBgH7G567Vk9U8oCGAE7U3LZNENVlZnJvWn7q59CSxhFEavHL6AN/z
tTEswD6acsPaIzvCvMgHYrbrGQfsHkQPs8/4o/x4WoxN67VC/9e1NVYQMNWyafZ/
dmqGt+4JTz/VvDStuCszp3bRLL7ll+/QnyF1BoC1wNv0YGcjjH2PRHbpAoGAMP5x
43il19mHJu7/F199gW+V/XjFN1/82fJQFJU6tbB39fVDhjbZGMah8DDdQ9ZHNvJU
5vYImWXWArjE/B35UJpPWIKY8PL+5JWKgWu0Y0JD3PieswNnjW0DJSU+Onbd1WBZ
ni6r6qD2cRif7NH9XQWSBAwbgJ+YcxIVyaOlljECgYEAg83pxvFsEKOnyIFBoclz
9LRbAlyxDIoY4RNigXL8gCcwMVWd2cNwOZbLgKanN2uOFXHvOCozrL5f5i6f7bHd
buwfesohD2EsN5FZ4HPsQGWTOBcJb0MXC/tJfUpKMiB8wCEm4CXezSZVNMHO4M9w
PhDP1i21jhMyUUoE2XsXUlU=
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	asn1val, err := MarshalPKCS8PrivateKeyWithAttributes(cert, key)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(asn1val))
	var privateKeyWithAttr pkcs8WithAttributes
	_, err = asn1.Unmarshal(asn1val, &privateKeyWithAttr)
	if err != nil {
		t.Fatal(err)
	}
	if len(privateKeyWithAttr.Attributes) != 1 || len(privateKeyWithAttr.Attributes[0].Values) != 1 || int(privateKeyWithAttr.Attributes[0].Values[0].Bytes[0]) != 0b10010000 {
		t.Fatal("key should have digitalsignature and dataencipherment")
	}
}

func TestThatPrivateKeyEncodingAddsNoAttributeForCrlSignCert(t *testing.T) {
	certString := `-----BEGIN CERTIFICATE-----
MIIDFTCCAf2gAwIBAgIQI9LdZflGYvyastfzcuwqFTANBgkqhkiG9w0BAQsFADAO
MQwwCgYDVQQDDANBQzIwHhcNMjQwMjEzMTQyMzU0WhcNMjUwMjEyMTQyMzU0WjAP
MQ0wCwYDVQQDDAR0ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
luvPARIaLq2J5FP7oXcQsNq2y6mZ9LMhPWtwz40L+tpO7Cgy+slTFV3tkB7ioMDw
3IY5B1HeWcvy8u3Ss5unywOHghsAqYnaGht85i2LeyjWQDUqN51tabqS27AsGjK6
A7GPk5oZdAWcKLWtyYBAi2XMn910FXIj3j5wx4rvdnsWrMKGk/JSkhaZXu9ZnrfC
yhHg89LdMqYkcAuP6dvB/jlM9FoNPxVaNgSSnGNFfI4RR09nkkhhgIQBYClWEJA2
RDXV5I208Nw+5b48CibgWmpyGi25JlsbAU2kIohE4ZCZT04UKA3ahjOWHEqdbsxS
bn+NqNlZNGuhImJnzLtkxQIDAQABo24wbDAMBgNVHRMBAf8EAjAAMB0GA1UdDgQW
BBRO579pF0JvOC/mVIQCJWq548tqKzAfBgNVHSMEGDAWgBQmbdxzWH8HeoFiXE9o
hIBTrs/0MjALBgNVHQ8EBAMCAQIwDwYDVR0RBAgwBoIEdGVzdDANBgkqhkiG9w0B
AQsFAAOCAQEAP1mcf/hnn88Dix30YxEm+nOpCtQ+hi8VDEnw+dCmE0CS9Wn55Czh
ADQcDJDkZfxlTuOqqLc5SnvVQOqiqax3WIQHXJnJTHTgRVzMivg4qaqBZncY67AV
Lpxc0iiDGzt/Om3QR0W/pZx2moZSTUnYpa+BPacjAOQglisoegBA1tbrYpBwDXLB
l0d/RNhnZlEmbF5ZcjH1CEgR41nod7vTPocnQy4VDezqKWoZfppvB3T9c15leUyV
zRkvWx4gjG4IuLqDgUHeFz5leJobNmbuXeTILUYa25H6yZtj1Tg05R8HIi0jyhSf
wsDHGrzWpMGQJx6+8KoWLKUOPrGC+qj9JQ==
-----END CERTIFICATE-----`
	block, _ := pem.Decode([]byte(certString))
	cert, err := x509.ParseCertificate(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	pemString := `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCLuuuMtYLoknlS
8ViOkxkfL+/nJZWM06LoqKlN6kktIUz6p35NYQhbxy6VWqjSTA3TR4SENuow8daF
DOfTLvYy2O0sxnEaR8yKrWhJWFuO4rKNmgeG+L24C8bdEXGBJiW38TvYXkUHL56m
X5yPxNZnC19dkbRJBPsRtXjMqrZGa+8q6jm+NNfI5RCc9MlFhu37VucuJ2LKR+U3
89CZMY8UvOaX19Pzo1RzdsdW+jeP66qCghrfnIschb6QpvzczdS96olDWdFjjXZ0
PKnO67aXFg8ary19beViGBSFRrnkk2oEhYv3BzmFZDety5ez1HimjfK06drOeO9G
NocbJbU5AgMBAAECggEAC7qD3Qq7U0RANMsXUNheCnUeoPtRo0F8ciT+GREqVURv
TrbSbjJP3kxIx7aVZxmFK4/cOrDVVYhnJkHgD6Toe3oj5lc91SPjslw93bIx9Tto
G2SrbxPf8NvkNFgre9i038y65j17c8/2dCagYJz4FiwpNBRv2pU1cdYWrq9Bn4V+
CDIAOZvj/Wud1Z8z7p/kzvu0xPvQb3+RFwVeS4mR4fA8EzXuEu2NY1PRXqdDTXO0
uA93JxrVSXoMhiFlWinZGwypZtMKqR4Esyb0smH6QL7u/HjDDWiDw4UCQd8lfOlc
BgaNIjraXl1hbjkh1znSJ7PbeuXbteg7FOi/mdv+gQKBgQDDb6/ftQ7fWN7KiOFW
3kDR82sa55gGtzBts4F20uv1IZSMGnJEbAMKTYH2UkCgZiulAxq8IWzCcGyylgmZ
grxw0zdpiDkEbcNtz0qL9l8gUMfDRdTapN4FATy4oeUQ3FJd/G2f1SRCaThn0/Zf
sB86nCqMMs7zm9l1UfuotUoAaQKBgQC3B/dFt5wxblIp6ZYBADPYymv460YXR0Jw
jlZ11ze2u4pcGRAPGCQRVQrLyM1q05wWQwlm6Cnm6ClVr2osyNEQS2oWHyl7AEZj
nb+hh6LxFMgkfSRuwp3gSJ8mhA4QJ9Ayo6+3+X47OuWwsIdEMMWDN3tnrtuhivPx
CSIKcKx0UQKBgH7G567Vk9U8oCGAE7U3LZNENVlZnJvWn7q59CSxhFEavHL6AN/z
tTEswD6acsPaIzvCvMgHYrbrGQfsHkQPs8/4o/x4WoxN67VC/9e1NVYQMNWyafZ/
dmqGt+4JTz/VvDStuCszp3bRLL7ll+/QnyF1BoC1wNv0YGcjjH2PRHbpAoGAMP5x
43il19mHJu7/F199gW+V/XjFN1/82fJQFJU6tbB39fVDhjbZGMah8DDdQ9ZHNvJU
5vYImWXWArjE/B35UJpPWIKY8PL+5JWKgWu0Y0JD3PieswNnjW0DJSU+Onbd1WBZ
ni6r6qD2cRif7NH9XQWSBAwbgJ+YcxIVyaOlljECgYEAg83pxvFsEKOnyIFBoclz
9LRbAlyxDIoY4RNigXL8gCcwMVWd2cNwOZbLgKanN2uOFXHvOCozrL5f5i6f7bHd
buwfesohD2EsN5FZ4HPsQGWTOBcJb0MXC/tJfUpKMiB8wCEm4CXezSZVNMHO4M9w
PhDP1i21jhMyUUoE2XsXUlU=
-----END PRIVATE KEY-----`
	block, _ = pem.Decode([]byte(pemString))
	key, _, err := ParsePKCS8PrivateKey(block.Bytes)
	if err != nil {
		t.Fatal(err)
	}

	asn1val, err := MarshalPKCS8PrivateKeyWithAttributes(cert, key)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(base64.StdEncoding.EncodeToString(asn1val))
	var privateKeyWithAttr pkcs8WithAttributes
	_, err = asn1.Unmarshal(asn1val, &privateKeyWithAttr)
	if err != nil {
		t.Fatal(err)
	}
	if len(privateKeyWithAttr.Attributes) != 0 {
		t.Fatal("key should have no attributes")
	}
}
